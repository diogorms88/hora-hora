<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dashboard de Produção - Plascar</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <style>
    :root {
      --primary-color: #1976d2;
      --background-color: #f0f2f5;
      --card-background: #ffffff;
      --text-color: #333333;
      --border-radius: 12px;
      --success-color: #4caf50;
      --warning-color: #ff9800;
      --danger-color: #d32f2f;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--background-color);
      min-height: 100vh;
    }

    /* Header com Logo e Login */
    .header {
      background-color: var(--card-background);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 1000;
    }

    .logo {
      font-family: Arial Black, sans-serif;
      color: #0056A3;
      font-size: 28px;
      font-weight: bold;
      letter-spacing: 2px;
    }

    .login-area {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .login-area input {
      padding: 8px 12px;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 14px;
    }

    .login-area button {
      padding: 8px 20px;
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s;
    }

    .login-area button:hover {
      background-color: #1565c0;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 10px;
      color: var(--primary-color);
      font-weight: 500;
    }

    /* Dashboard Container */
    .dashboard {
      padding: 20px;
      max-width: 1400px;
      margin: 0 auto;
    }

    /* Cards de Resumo */
    .summary-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 30px;
    }

    .summary-card {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      transition: transform 0.3s, box-shadow 0.3s;
      position: relative;
      overflow: hidden;
    }

    .summary-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .summary-card h3 {
      font-size: 14px;
      color: #666;
      margin-bottom: 8px;
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .summary-card .value {
      font-size: 28px;
      font-weight: bold;
      color: var(--primary-color);
    }

    .summary-card .subtitle {
      font-size: 12px;
      color: #999;
      margin-top: 4px;
    }

    .summary-card.success .value { color: var(--success-color); }
    .summary-card.warning .value { color: var(--warning-color); }
    .summary-card.danger .value { color: var(--danger-color); }

    /* Sparkline mini gráfico */
    .sparkline {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 80px;
      height: 30px;
      opacity: 0.3;
    }

    /* Grid de Gráficos */
    .charts-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .chart-container {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .chart-container h3 {
      color: var(--primary-color);
      margin-bottom: 20px;
      font-size: 18px;
    }

    .chart-container canvas {
      width: 100% !important;
      max-height: 300px;
    }

    #graficoModelosPintados, #graficoCoresPintadas {
      max-height: 400px !important;
    }

    /* Tabela de Produção */
    .table-container {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      overflow-x: auto;
    }

    .table-container h3 {
      color: var(--primary-color);
      margin-bottom: 20px;
      font-size: 18px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }

    th {
      background-color: #f5f5f5;
      font-weight: 600;
      color: #666;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    tr:hover {
      background-color: #f9f9f9;
    }

    /* Botão de Exclusão */
    .btnDel {
      background: #ff5252;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
    }

    .btnDel:hover {
      background: #d32f2f;
    }

    /* Filtros */
    .filters {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 15px 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }

    .filters label {
      display: flex;
      align-items: center;
      gap: 5px;
      font-weight: 500;
    }

    .filters input, .filters select {
      padding: 8px 12px;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 14px;
    }

    .filters button {
      padding: 8px 20px;
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s;
    }

    .filters button:hover {
      background-color: #1565c0;
    }

    /* Tab Content */
    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    /* Navegação Tabs */
    .nav-tabs {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      background-color: var(--card-background);
      padding: 10px 20px;
      border-radius: var(--border-radius);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .nav-tab {
      padding: 10px 20px;
      background: none;
      border: none;
      color: #666;
      cursor: pointer;
      font-size: 16px;
      font-weight: 500;
      border-bottom: 3px solid transparent;
      transition: all 0.3s;
    }

    .nav-tab:hover {
      color: var(--primary-color);
    }

    .nav-tab.active {
      color: var(--primary-color);
      border-bottom-color: var(--primary-color);
    }

    /* Página de Consumo */
    .consumo-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .config-button {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .config-button:hover {
      background-color: #1565c0;
    }

    /* Modal de Configuração */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 2000;
      align-items: center;
      justify-content: center;
    }

    .modal.active {
      display: flex;
    }

    .modal-content {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 30px;
      max-width: 1000px;
      width: 95%;
      max-height: 90vh;
      overflow-y: auto;
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .modal-header h2 {
      color: var(--primary-color);
      margin: 0;
    }

    .close-button {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #666;
    }

    .close-button:hover {
      color: #333;
    }

    .config-form {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .config-section {
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      padding: 15px;
    }

    .config-section h3 {
      margin-top: 0;
      color: #555;
      font-size: 16px;
      margin-bottom: 15px;
    }

    .config-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 15px;
    }

    .config-field {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }

    .config-field label {
      font-size: 14px;
      color: #666;
      font-weight: 500;
    }

    .config-field input, .config-field select {
      padding: 8px 12px;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 14px;
    }

    .save-config-button {
      background-color: var(--success-color);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 20px;
    }

    .save-config-button:hover {
      background-color: #45a049;
    }

    /* Configuração por item */
    .config-item {
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      background-color: #fafafa;
    }

    .config-item h4 {
      margin: 0 0 15px 0;
      color: #333;
      font-size: 16px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .remove-config-btn {
      background: #ff5252;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
    }

    .add-config-btn {
      background-color: var(--success-color);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      margin-top: 10px;
    }

    .add-config-btn:hover {
      background-color: #45a049;
    }

    /* Cards de Resumo de Consumo */
    .consumo-summary-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .consumo-summary-card {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .consumo-summary-card h3 {
      color: var(--primary-color);
      margin-bottom: 15px;
      font-size: 18px;
    }

    .consumo-metric {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 0;
      border-bottom: 1px solid #f0f0f0;
    }

    .consumo-metric:last-child {
      border-bottom: none;
    }

    .metric-label {
      color: #666;
      font-size: 14px;
    }

    .metric-value {
      font-weight: bold;
      color: #333;
      font-size: 16px;
    }

    /* Lista de top 5 */
    .top-list {
      list-style: none;
      padding: 0;
    }

    .top-list li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 0;
      border-bottom: 1px solid #f0f0f0;
      font-size: 14px;
    }

    .top-list li:last-child {
      border-bottom: none;
    }

    .top-list .rank {
      background: var(--primary-color);
      color: white;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: bold;
      margin-right: 10px;
    }

    .top-list .item-info {
      flex: 1;
      margin-right: 10px;
    }

    .top-list .item-value {
      font-weight: bold;
      color: var(--primary-color);
    }

    /* Tabela de Consumo Detalhado */
    .consumo-table-container {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      overflow-x: auto;
      margin-bottom: 20px;
    }

    .consumo-table {
      width: 100%;
      border-collapse: collapse;
    }

    .consumo-table th {
      background-color: var(--primary-color);
      color: white;
      padding: 12px;
      text-align: left;
      font-weight: 500;
    }

    .consumo-table td {
      padding: 12px;
      border-bottom: 1px solid #e0e0e0;
    }

    .consumo-table tr:hover {
      background-color: #f9f9f9;
    }

    .consumo-table tr:last-child td {
      border-bottom: none;
    }

    /* Heatmap */
    .heatmap-container {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      overflow-x: auto;
      margin-bottom: 20px;
    }

    .heatmap {
      display: grid;
      grid-template-columns: 120px repeat(24, 1fr);
      gap: 2px;
      font-size: 12px;
    }

    .heatmap-cell {
      padding: 8px 4px;
      text-align: center;
      border-radius: 4px;
      min-width: 40px;
    }

    .heatmap-header {
      background-color: #f5f5f5;
      font-weight: bold;
    }

    .heatmap-row-header {
      background-color: #f5f5f5;
      font-weight: bold;
      text-align: left;
      padding: 8px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    /* Skeleton Loader */
    .skeleton {
      animation: skeleton-loading 1s linear infinite alternate;
    }

    @keyframes skeleton-loading {
      0% {
        background-color: #f0f0f0;
      }
      100% {
        background-color: #e0e0e0;
      }
    }

    .skeleton-text {
      width: 100%;
      height: 1em;
      margin-bottom: 0.5rem;
      border-radius: 4px;
    }

    .skeleton-box {
      width: 100%;
      height: 200px;
      border-radius: 8px;
    }

    /* Loading Spinner */
    .loading {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 18px;
      color: var(--primary-color);
    }

    .loading.active {
      display: block;
    }

    /* FAB - Floating Action Button */
    .fab {
      position: fixed;
      bottom: 30px;
      right: 30px;
      width: 56px;
      height: 56px;
      background-color: var(--primary-color);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 24px;
      cursor: pointer;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      transition: transform 0.3s, background-color 0.3s;
      z-index: 999;
    }

    .fab:hover {
      transform: scale(1.1);
      background-color: #1565c0;
    }

    .fab.hidden {
      display: none;
    }

    /* Auto Refresh Indicator */
    .auto-refresh {
      position: fixed;
      bottom: 20px;
      left: 20px;
      width: 34px;
      height: 34px;
      border-radius: 50%;
      background: var(--primary-color);
    }

    .auto-refresh::before {
      content: '🔄';
      position: absolute;
      inset: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #fff;
      font-size: 18px;
      animation: spin 2s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    /* Formulário de Lançamento */
    .data-entry-section {
      display: none;
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 30px;
      margin: 20px auto;
      max-width: 800px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .data-entry-section.active {
      display: block;
    }

    .data-entry-section h2 {
      color: var(--primary-color);
      margin-bottom: 20px;
      text-align: center;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #555;
    }

    .form-group input, .form-group select {
      width: 100%;
      padding: 12px;
      border: 1px solid #ccc;
      border-radius: var(--border-radius);
      font-size: 16px;
    }

    .input-group {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }

    .input-group input, .input-group select {
      flex: 1;
    }

    .add-button {
      background-color: var(--success-color);
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      margin-top: 10px;
      width: 100%;
    }

    .add-button:hover {
      background-color: #45a049;
    }

    .submit-button {
      background-color: var(--primary-color);
      color: white;
      padding: 14px;
      border: none;
      border-radius: var(--border-radius);
      cursor: pointer;
      font-size: 16px;
      width: 100%;
      margin-top: 20px;
    }

    .submit-button:hover {
      background-color: #1565c0;
    }

    /* Modelo mais pintado highlight */
    .modelo-destaque {
      background-color: #fff3cd !important;
      border-left: 4px solid #ffc107;
      font-weight: bold;
    }

    /* Tabs de configuração */
    .config-tabs {
      display: flex;
      gap: 5px;
      margin-bottom: 20px;
      border-bottom: 1px solid #e0e0e0;
    }

    .config-tab {
      padding: 10px 15px;
      background: none;
      border: none;
      color: #666;
      cursor: pointer;
      font-size: 14px;
      border-bottom: 2px solid transparent;
      transition: all 0.3s;
    }

    .config-tab:hover {
      color: var(--primary-color);
    }

    .config-tab.active {
      color: var(--primary-color);
      border-bottom-color: var(--primary-color);
    }

    .config-tab-content {
      display: none;
    }

    .config-tab-content.active {
      display: block;
    }

    /* Tabela Hora a Hora */
    .hora-hora-table {
      background-color: var(--card-background);
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      margin-bottom: 20px;
      overflow-x: auto;
    }

    .hora-hora-table table {
      width: 100%;
      border-collapse: collapse;
      font-size: 12px;
    }

    .hora-hora-table th {
      background-color: var(--primary-color);
      color: white;
      padding: 8px;
      text-align: center;
      font-weight: 500;
      min-width: 60px;
    }

    .hora-hora-table td {
      padding: 6px 8px;
      border-bottom: 1px solid #e0e0e0;
      text-align: center;
    }

    .hora-hora-table .model-cell {
      text-align: left;
      font-weight: 500;
      background-color: #f8f9fa;
      min-width: 120px;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .summary-cards {
        grid-template-columns: 1fr;
      }

      .charts-grid {
        grid-template-columns: 1fr;
      }
      
      .filters {
        flex-direction: column;
        align-items: stretch;
      }
      
      .login-area {
        flex-direction: column;
        gap: 5px;
      }

      .chart-container canvas {
        max-height: 250px;
      }

      table {
        font-size: 13px;
      }

      th, td {
        padding: 8px;
      }

      .fab {
        width: 52px;
        height: 52px;
        font-size: 22px;
        bottom: 24px;
        right: 24px;
      }

      .heatmap {
        font-size: 10px;
        grid-template-columns: 80px repeat(24, 1fr);
      }

      .nav-tabs {
        overflow-x: auto;
        white-space: nowrap;
      }

      .consumo-summary-cards {
        grid-template-columns: 1fr;
      }

      .config-row {
        grid-template-columns: 1fr;
      }

      .modal-content {
        width: 98%;
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="header">
    <div class="logo">PLASCAR</div>
    <div class="login-area" id="loginArea">
      <input type="text" id="username" placeholder="Usuário">
      <input type="password" id="password" placeholder="Senha">
      <button id="btnLogin">Entrar</button>
    </div>
    <div class="user-info" id="userInfo" style="display: none;">
      <span id="userName"></span>
      <button id="btnLogout">Sair</button>
    </div>
  </div>

  <!-- Loading -->
  <div class="loading" id="loading">Carregando dados...</div>

  <!-- Dashboard Principal -->
  <div class="dashboard" id="dashboard">
    <!-- Navegação por Tabs -->
    <div class="nav-tabs">
      <button class="nav-tab active" onclick="mostrarTab('dashboard-tab')">📊 Dashboard</button>
      <button class="nav-tab" onclick="mostrarTab('consumo-tab')">🎨 Consumo de Materiais</button>
    </div>

    <!-- Dashboard Tab -->
    <div id="dashboard-tab" class="tab-content active">
      <!-- Filtros -->
      <div class="filters">
        <label>
          📅 Data Inicial:
          <input type="date" id="filtroDataInicial">
        </label>
        <label>
          📅 Data Final:
          <input type="date" id="filtroDataFinal">
        </label>
        <label>
          🕒 Turno:
          <select id="filtroTurno">
            <option value="">Todos</option>
            <option value="1T">1º Turno (06h00 – 14h59)</option>
            <option value="2T">2º Turno (15h00 – 23h59)</option>
            <option value="3T">3º Turno (00h00 – 05h59)</option>
          </select>
        </label>
        <button id="btnAtualizar">Atualizar</button>
      </div>

      <!-- Cards de Resumo - Primeira Linha -->
      <div class="summary-cards" id="summaryCards">
        <!-- Cards serão gerados dinamicamente -->
      </div>

      <!-- Gráficos - Primeira Linha -->
      <div class="charts-grid">
        <div class="chart-container">
          <h3>📊 Produção por Hora</h3>
          <canvas id="graficoProducao"></canvas>
        </div>
        <div class="chart-container">
          <h3>📈 Curva S - Produção Acumulada</h3>
          <canvas id="graficoCurvaS"></canvas>
        </div>
      </div>

      <!-- Gráficos - Segunda Linha -->
      <div class="charts-grid">
        <div class="chart-container">
          <h3>📊 Pareto de Paradas (Top 10)</h3>
          <canvas id="graficoPareto"></canvas>
        </div>
        <div class="chart-container">
          <h3>⚠️ Parada por Área</h3>
          <canvas id="graficoParadas"></canvas>
        </div>
      </div>

      <!-- Heatmap -->
      <div class="heatmap-container">
        <h3>🔥 Heatmap - Paradas por Hora e Motivo</h3>
        <div id="heatmapContainer"></div>
      </div>

      <!-- Tabela de Paradas -->
      <div class="table-container" style="margin-top: 20px;">
        <h3>⏱ Detalhamento de Paradas por Hora</h3>
        <table id="tabelaParadas">
          <thead>
            <tr>
              <th>Horário</th>
              <th>Motivo</th>
              <th>Tempo (min)</th>
              <th>Área</th>
              <th>Ações</th>
            </tr>
          </thead>
          <tbody id="tabelaParadasBody">
            <!-- Dados serão inseridos via JavaScript -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- Consumo Tab -->
    <div id="consumo-tab" class="tab-content">
      <div class="consumo-header">
        <h2>🎨 Análise de Consumo de Materiais</h2>
        <button class="config-button" id="btnConfigConsumo" style="display: none;" onclick="abrirModalConfig()">
          ⚙️ Configurações
        </button>
      </div>

      <!-- Filtros para Consumo -->
      <div class="filters">
        <label>
          📅 Data Inicial:
          <input type="date" id="filtroConsumoDataInicial">
        </label>
        <label>
          📅 Data Final:
          <input type="date" id="filtroConsumoDataFinal">
        </label>
        <label>
          🕒 Turno:
          <select id="filtroConsumoTurno">
            <option value="">Todos</option>
            <option value="1T">1º Turno (06h00 – 14h59)</option>
            <option value="2T">2º Turno (15h00 – 23h59)</option>
            <option value="3T">3º Turno (00h00 – 05h59)</option>
          </select>
        </label>
        <button id="btnAtualizarConsumo">Atualizar Consumo</button>
      </div>

      <!-- Cards de Resumo de Consumo -->
      <div class="consumo-summary-cards" id="consumoSummaryCards">
        <!-- Será preenchido dinamicamente -->
      </div>

      <!-- Gráficos de Análise -->
      <div class="charts-grid">
        <div class="chart-container">
          <h3>📊 Top 10 Modelos Mais Pintados</h3>
          <canvas id="graficoModelosPintados"></canvas>
        </div>
        <div class="chart-container">
          <h3>🎨 Top 10 Cores Mais Pintadas</h3>
          <canvas id="graficoCoresPintadas"></canvas>
        </div>
      </div>

      <!-- Produção Hora a Hora -->
      <div class="hora-hora-table">
        <h3>🕐 Produção Hora a Hora por Modelo</h3>
        <div id="horaHoraContainer">
          <!-- Será preenchido dinamicamente -->
        </div>
      </div>

      <!-- Tabela de Consumo por Modelo e Cor -->
      <div class="consumo-table-container">
        <h3>📋 Consumo Detalhado por Modelo e Cor</h3>
        <table class="consumo-table" id="tabelaConsumoDetalhado">
          <thead>
            <tr>
              <th>Modelo</th>
              <th>Cor</th>
              <th>Quantidade</th>
              <th>Tipo</th>
              <th>Consumo Total (L)</th>
              <th>Material Puro (L)</th>
              <th>Diluente (L)</th>
              <th>Catalisador (L)</th>
            </tr>
          </thead>
          <tbody id="tabelaConsumoBody">
            <!-- Dados serão inseridos via JavaScript -->
          </tbody>
        </table>
      </div>

      <!-- Resumo por Tipo de Material -->
      <div class="consumo-table-container">
        <h3>📊 Resumo Total por Tipo de Material</h3>
        <table class="consumo-table" id="tabelaResumoMaterial">
          <thead>
            <tr>
              <th>Tipo de Material</th>
              <th>Total Consumido (L)</th>
            </tr>
          </thead>
          <tbody id="tabelaResumoMaterialBody">
            <!-- Dados serão inseridos via JavaScript -->
          </tbody>
        </table>
      </div>

      <!-- Tabela PPF - Processo Padrão de Fabricação -->
      <div class="consumo-table-container">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
          <h3>🔧 PPF - Processo Padrão de Fabricação (Consumo por Peça)</h3>
          <button class="config-button" id="btnGerenciarPPF" style="display: none;" onclick="abrirGerenciamentoPPF()">
            ⚙️ Gerenciar PPF
          </button>
        </div>
        <table class="consumo-table" id="tabelaPPF">
          <thead>
            <tr>
              <th>Modelo + Cor</th>
              <th>Primer (ml)</th>
              <th>Base (ml)</th>
              <th>Verniz (ml)</th>
              <th>Diluente X (ml)</th>
              <th>Diluente Y (ml)</th>
              <th>Diluente Z (ml)</th>
              <th>Catalisador (ml)</th>
              <th>Total/Peça (ml)</th>
              <th id="acoesPPF" style="display: none;">Ações</th>
            </tr>
          </thead>
          <tbody id="tabelaPPFBody">
            <!-- Dados serão inseridos via JavaScript -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Modal de Configuração -->
  <div class="modal" id="modalConfig">
    <div class="modal-content">
      <div class="modal-header">
        <h2>⚙️ Configurações de Consumo</h2>
        <button class="close-button" onclick="fecharModalConfig()">×</button>
      </div>
      
      <!-- Tabs de Configuração -->
      <div class="config-tabs">
        <button class="config-tab active" onclick="mostrarConfigTab('geral')">🎨 Configuração Geral</button>
        <button class="config-tab" onclick="mostrarConfigTab('especificas')">🔧 Configurações Específicas</button>
      </div>

      <form class="config-form" id="formConfig">
        <!-- Tab Configuração Geral -->
        <div id="config-geral" class="config-tab-content active">
          <div class="config-section">
            <h3>🎨 Configurações Gerais de Diluição</h3>
            <p style="color: #666; margin-bottom: 15px;">Configure as taxas de diluição e tipos de diluente para cada material. Os consumos por peça são configurados nas configurações específicas.</p>
            
            <div class="config-row">
              <div class="config-field">
                <label for="primerDiluicao">Taxa de diluição Primer (%)</label>
                <input type="number" id="primerDiluicao" value="30" min="0" max="100">
              </div>
              <div class="config-field">
                <label for="primerDiluente">Tipo de diluente Primer</label>
                <select id="primerDiluente">
                  <option value="X">Diluente X</option>
                  <option value="Y">Diluente Y</option>
                  <option value="Z">Diluente Z</option>
                </select>
              </div>
            </div>

            <div class="config-row">
              <div class="config-field">
                <label for="baseDiluicao">Taxa de diluição Base (%)</label>
                <input type="number" id="baseDiluicao" value="30" min="0" max="100">
              </div>
              <div class="config-field">
                <label for="baseDiluente">Tipo de diluente Base</label>
                <select id="baseDiluente">
                  <option value="X">Diluente X</option>
                  <option value="Y">Diluente Y</option>
                  <option value="Z">Diluente Z</option>
                </select>
              </div>
            </div>

            <div class="config-row">
              <div class="config-field">
                <label for="vernizDiluicao">Taxa de diluição Verniz (%)</label>
                <input type="number" id="vernizDiluicao" value="30" min="0" max="100">
              </div>
              <div class="config-field">
                <label for="vernizDiluente">Tipo de diluente Verniz</label>
                <select id="vernizDiluente">
                  <option value="X">Diluente X</option>
                  <option value="Y">Diluente Y</option>
                  <option value="Z">Diluente Z</option>
                </select>
              </div>
              <div class="config-field">
                <label for="vernizCatalisador">Taxa de catalisador Verniz (%)</label>
                <input type="number" id="vernizCatalisador" value="27" min="0" max="100">
              </div>
            </div>
          </div>
        </div>

        <!-- Tab Configurações Específicas -->
        <div id="config-especificas" class="config-tab-content">
          <div class="config-section">
            <h3>🔧 Configurações Específicas por Modelo e Cor</h3>
            <p style="color: #666; margin-bottom: 15px;">Configure o consumo específico de cada material por modelo e cor. Deixe em branco para usar valores padrão.</p>
            
            <div id="configEspecificasContainer">
              <!-- Será preenchido dinamicamente -->
            </div>
            
            <button type="button" class="add-config-btn" onclick="adicionarConfiguracao()">
              ➕ Adicionar Nova Configuração
            </button>
          </div>
        </div>

        <button type="button" class="save-config-button" onclick="salvarConfiguracoes()">
          💾 Salvar Configurações
        </button>
      </form>
    </div>
  </div>

  <!-- Modal de Gerenciamento PPF -->
  <div class="modal" id="modalPPF">
    <div class="modal-content">
      <div class="modal-header">
        <h2>⚙️ Gerenciar PPF - Processo Padrão de Fabricação</h2>
        <button class="close-button" onclick="fecharModalPPF()">×</button>
      </div>
      
      <div class="config-form">
        <div class="config-section">
          <h3>🔧 Combinações Modelo + Cor na PPF</h3>
          <p style="color: #666; margin-bottom: 15px;">Selecione quais combinações de modelo e cor devem aparecer na tabela PPF.</p>
          
          <div id="ppfContainer">
            <!-- Será preenchido dinamicamente -->
          </div>
          
          <button type="button" class="add-config-btn" onclick="adicionarItemPPF()">
            ➕ Adicionar Combinação
          </button>
        </div>

        <button type="button" class="save-config-button" onclick="salvarPPF()">
          💾 Salvar PPF
        </button>
      </div>
    </div>
  </div>
    <div class="modal-content">
      <div class="modal-header">
        <h2>⚙️ Configurações de Consumo</h2>
        <button class="close-button" onclick="fecharModalConfig()">×</button>
      </div>
      
      <!-- Tabs de Configuração -->
      <div class="config-tabs">
        <button class="config-tab active" onclick="mostrarConfigTab('geral')">🎨 Configuração Geral</button>
        <button class="config-tab" onclick="mostrarConfigTab('especificas')">🔧 Configurações Específicas</button>
      </div>

      <form class="config-form" id="formConfig">
        <!-- Tab Configuração Geral -->
        <div id="config-geral" class="config-tab-content active">
          <div class="config-section">
            <h3>🎨 Configurações Gerais de Diluição</h3>
            <p style="color: #666; margin-bottom: 15px;">Configure as taxas de diluição e tipos de diluente para cada material. Os consumos por peça são configurados nas configurações específicas.</p>
            
            <div class="config-row">
              <div class="config-field">
                <label for="primerDiluicao">Taxa de diluição Primer (%)</label>
                <input type="number" id="primerDiluicao" value="30" min="0" max="100">
              </div>
              <div class="config-field">
                <label for="primerDiluente">Tipo de diluente Primer</label>
                <select id="primerDiluente">
                  <option value="X">Diluente X</option>
                  <option value="Y">Diluente Y</option>
                  <option value="Z">Diluente Z</option>
                </select>
              </div>
            </div>

            <div class="config-row">
              <div class="config-field">
                <label for="baseDiluicao">Taxa de diluição Base (%)</label>
                <input type="number" id="baseDiluicao" value="30" min="0" max="100">
              </div>
              <div class="config-field">
                <label for="baseDiluente">Tipo de diluente Base</label>
                <select id="baseDiluente">
                  <option value="X">Diluente X</option>
                  <option value="Y">Diluente Y</option>
                  <option value="Z">Diluente Z</option>
                </select>
              </div>
            </div>

            <div class="config-row">
              <div class="config-field">
                <label for="vernizDiluicao">Taxa de diluição Verniz (%)</label>
                <input type="number" id="vernizDiluicao" value="30" min="0" max="100">
              </div>
              <div class="config-field">
                <label for="vernizDiluente">Tipo de diluente Verniz</label>
                <select id="vernizDiluente">
                  <option value="X">Diluente X</option>
                  <option value="Y">Diluente Y</option>
                  <option value="Z">Diluente Z</option>
                </select>
              </div>
              <div class="config-field">
                <label for="vernizCatalisador">Taxa de catalisador Verniz (%)</label>
                <input type="number" id="vernizCatalisador" value="27" min="0" max="100">
              </div>
            </div>
          </div>
        </div>

        <!-- Tab Configurações Específicas -->
        <div id="config-especificas" class="config-tab-content">
          <div class="config-section">
            <h3>🔧 Configurações Específicas por Modelo e Cor</h3>
            <p style="color: #666; margin-bottom: 15px;">Configure o consumo específico de cada material por modelo e cor. Deixe em branco para usar valores padrão.</p>
            
            <div id="configEspecificasContainer">
              <!-- Será preenchido dinamicamente -->
            </div>
            
            <button type="button" class="add-config-btn" onclick="adicionarConfiguracao()">
              ➕ Adicionar Nova Configuração
            </button>
          </div>
        </div>

        <button type="button" class="save-config-button" onclick="salvarConfiguracoes()">
          💾 Salvar Configurações
        </button>
      </form>
    </div>
  </div>

  <!-- Seção de Lançamento de Dados -->
  <div class="data-entry-section" id="dataEntrySection">
    <h2>📋 Registro Hora a Hora</h2>
    
    <div class="form-group">
      <label for="hora">⏰ Horário:</label>
      <select id="hora">
        <option value="">-- Selecione --</option>
        <optgroup label="🌙 3º Turno (00h00 - 06h00)">
          <option value="00h00 - 01h00">00h00 - 01h00</option>
          <option value="01h00 - 02h00">01h00 - 02h00</option>
          <option value="02h00 - 03h00">02h00 - 03h00</option>
          <option value="03h00 - 04h00">03h00 - 04h00</option>
          <option value="04h00 - 05h00">04h00 - 05h00</option>
          <option value="05h00 - 06h00">05h00 - 06h00</option>
        </optgroup>
        <optgroup label="🌞 1º Turno (06h00 - 15h00)">
          <option value="06h00 - 07h00">06h00 - 07h00</option>
          <option value="07h00 - 08h00">07h00 - 08h00</option>
          <option value="08h00 - 09h00">08h00 - 09h00</option>
          <option value="09h00 - 10h00">09h00 - 10h00</option>
          <option value="10h00 - 11h00">10h00 - 11h00</option>
          <option value="11h00 - 12h00">11h00 - 12h00</option>
          <option value="12h00 - 13h00">12h00 - 13h00</option>
          <option value="13h00 - 14h00">13h00 - 14h00</option>
          <option value="14h00 - 15h00">14h00 - 15h00</option>
        </optgroup>
        <optgroup label="🌇 2º Turno (15h00 - 23h59)">
          <option value="15h00 - 16h00">15h00 - 16h00</option>
          <option value="16h00 - 17h00">16h00 - 17h00</option>
          <option value="17h00 - 18h00">17h00 - 18h00</option>
          <option value="18h00 - 19h00">18h00 - 19h00</option>
          <option value="19h00 - 20h00">19h00 - 20h00</option>
          <option value="20h00 - 21h00">20h00 - 21h00</option>
          <option value="21h00 - 22h00">21h00 - 22h00</option>
          <option value="22h00 - 23h00">22h00 - 23h00</option>
          <option value="23h00 - 00h00">23h00 - 00h00</option>
        </optgroup>
      </select>
    </div>

    <div class="form-group">
      <label for="skids">🚗 Skids Produzidos:</label>
      <input type="number" id="skids" min="0" max="60">
    </div>

    <div class="form-group">
      <label for="skidsVazios">🚫 Skids Vazios:</label>
      <input type="number" id="skidsVazios" min="0" max="60">
    </div>

    <div class="form-group">
      <label>⛔ Motivos de Parada</label>
      <div id="paradasContainer">
        <!-- Será preenchido via JavaScript -->
      </div>
      <button class="add-button" id="btnAddParada">➕ Adicionar Parada</button>
    </div>

    <div class="form-group">
      <label>🏭 Produção por Modelo e Cor</label>
      <div id="producaoContainer">
        <!-- Será preenchido via JavaScript -->
      </div>
      <button class="add-button" id="btnAddProducao">➕ Adicionar Produção</button>
    </div>

    <button class="submit-button" id="btnSalvar">💾 Salvar Registro</button>
    <button class="submit-button" style="background-color: #666;" id="btnVoltar">↩️ Voltar ao Dashboard</button>
  </div>

  <!-- FAB - Botão flutuante para adicionar dados -->
  <div class="fab hidden" id="fabButton">
    ➕
  </div>

  <!-- Indicador de Auto Refresh -->
  <div class="auto-refresh"></div>

  <script>
    // Configuração do Supabase
    const SUPABASE_URL = 'https://alrfqjazctnjdewdthun.supabase.co';
    const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFscmZxamF6Y3RuamRld2R0aHVuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMyOTIyMTQsImV4cCI6MjA2ODg2ODIxNH0.5c19_9XfTyaZPPej4OsHANuIXoF5TM3TxFoEreVUVrA';
    
    // Variáveis globais
    let supabase = null;
    let chartProducao = null;
    let chartParadas = null;
    let chartCurvaS = null;
    let chartPareto = null;
    let chartModelosPintados = null;
    let chartCoresPintadas = null;
    let usuarioLogado = null;
    let refreshInterval = null;
    let sparklineCharts = {};
    let configuracaoConsumo = {
      geral: {
        primer: { taxa_diluicao: 30, diluente: 'X', taxa_catalisador: 0 },
        base: { taxa_diluicao: 30, diluente: 'Y', taxa_catalisador: 0 },
        verniz: { taxa_diluicao: 30, diluente: 'Z', taxa_catalisador: 27 }
      },
      especificas: [],
      ppf: [] // Lista de combinações modelo+cor para mostrar na PPF
    };

    // Listas de modelos e cores
    const MODELOS = [
      "Polo PA DT", "Polo PA TR", "Polo Track DT", "Polo Track TR", "Virtus DT", "Virtus TR",
      "Tera DT", "Tera Polaina LD", "Tera Polaina LE", "Grade Virtus", "Grade Virtus GTS",
      "Aerofólio", "Spoiler", "Tera Friso DT", "Tera Friso TR"
    ];

    const CORES = [
      "Primer P&A", "Branco", "Prata", "Preto", "Platinum", "Vermelho", 
      "Azul Biscay", "IceBird", "ClearWater", "HyperNova"
    ];

    // Componentes (não são PCH)
    const COMPONENTES = [
      "Aerofólio", "Spoiler", "Grade Virtus", "Grade Virtus GTS", 
      "Tera Friso DT", "Tera Friso TR"
    ];

    // Mapeamento de áreas por motivo
    const areaPorMotivo = {
      "TESTE DE ENGENHARIA": "ENGENHARIA",
      "LIMITE DE EIXO": "ENGENHARIA",
      "FALTA DE FERRAMENTAS": "GESTÃO",
      "FALTA DE OPERADOR NA CARGA": "GESTÃO",
      "FALTA DE PEÇAS DA PREPARAÇÃO": "GESTÃO",
      "OPERADOR BUSCANDO PEÇA NO ALMOXARIFADO": "GESTÃO",
      "OPERADOR NA ENFERMARIA": "GESTÃO",
      "ORGANIZAÇÃO GERAL NO SETOR": "GESTÃO",
      "PARADA NA CABINE": "GESTÃO",
      "PARADA NA CARGA - ABASTECENDO A LINHA": "GESTÃO",
      "PARADA NA DESCARGA - DESCARREGANDO PEÇAS": "GESTÃO",
      "PARADA EXTERNA": "GESTÃO",
      "REFEIÇÃO": "GESTÃO",
      "REGULAGEM DE MÁQUINA": "GESTÃO",
      "RETRABALHO / LIMPEZA DE PEÇAS": "GESTÃO",
      "REUNIÃO COM A DIRETORIA": "GESTÃO",
      "REUNIÃO": "GESTÃO",
      "TREINAMENTO": "GESTÃO",
      "TROCA DE TURNO": "GESTÃO",
      "AGUARDANDO A PROGRAMAÇÃO": "LOGÍSTICA",
      "FALHA RFID": "LOGÍSTICA",
      "FALTA DE ABASTECIMENTO DE RACK": "LOGÍSTICA",
      "FALTA DE EMBALAGEM DA LOGÍSTICA": "LOGÍSTICA",
      "FALTA DE EMPILHADOR DA LOGÍSTICA ABASTECENDO PEÇAS": "LOGÍSTICA",
      "FALTA DE MATÉRIA PRIMA (TINTA / VERNIZ)": "LOGÍSTICA",
      "FALTA DE PEÇAS DO ALMOXARIFADO (REQUISITADO)": "LOGÍSTICA",
      "FALTA DE PEÇAS INJETADAS": "LOGÍSTICA",
      "PARADA PROGRAMADA": "LOGÍSTICA",
      "AGUARDANDO A MANUTENÇÃO": "MANUTENÇÃO",
      "CABINE DESBALANCEADA": "MANUTENÇÃO",
      "CORRENTE QUEBRADA": "MANUTENÇÃO",
      "FALHA NO ELEVADOR": "MANUTENÇÃO",
      "FALTA AR COMPRIMIDO": "MANUTENÇÃO",
      "FALTA DE ENERGIA": "MANUTENÇÃO",
      "MANGUEIRA ENTUPIDA": "MANUTENÇÃO",
      "MANGUEIRA VAZANDO": "MANUTENÇÃO",
      "MANUTENÇÃO CORRETIVA": "MANUTENÇÃO",
      "SKID TRAVADO": "MANUTENÇÃO",
      "MANUTENÇÃO ELÉTRICA": "MANUTENÇÃO",
      "MANUTENÇÃO MECÂNICA": "MANUTENÇÃO",
      "MANUTENÇÃO PREDIAL": "MANUTENÇÃO",
      "MANUTENÇÃO PREVENTIVA": "MANUTENÇÃO",
      "MANUTENÇÃO SERRALHERIA": "MANUTENÇÃO",
      "PROBLEMA NO ROBÔ CAB. FLAMAGEM": "MANUTENÇÃO",
      "PROBLEMA NO ROBÔ CAB. PRIMER": "MANUTENÇÃO",
      "PROBLEMA NO ROBÔ CAB. BASE": "MANUTENÇÃO",
      "PROBLEMA NO ROBÔ CAB. VERNIZ": "MANUTENÇÃO",
      "PROBLEMA NO MAÇARICO": "MANUTENÇÃO",
      "PROBLEMA NO MOTOR / CORREIA": "MANUTENÇÃO",
      "PROBLEMA NO POWER WASH": "MANUTENÇÃO",
      "AGUARDANDO OPERADOR PARA LIMPEZA": "MILCLEAN",
      "FALTA DE OPERADOR": "PRODUÇÃO",
      "FIM DE EXPEDIENTE": "PRODUÇÃO",
      "LIMPEZA DE MÁQUINA": "PRODUÇÃO",
      "PAUSA": "PRODUÇÃO",
      "TROCA DE PEÇAS": "PRODUÇÃO",
      "TROCA DE SETUP": "PRODUÇÃO",
      "ESPERANDO LIBERAÇÃO DA QUALIDADE": "QUALIDADE",
      "SETUP DE COR": "SETUP",
      "TROCA DE MODELO": "SETUP",
      "LIMPEZA DA CABINE": "PINTURA",
      "GAP PARA LIMPEZA NA CABINE": "PINTURA",
      "LIMPEZA CONJUNTO ECOBELL": "PINTURA",
      "GAP NA FLAMAGEM": "PINTURA",
      "ACIDENTE / INCIDENTE": "SEGURANÇA",
      "INSPEÇÃO DE SEGURANÇA": "SEGURANÇA"
    };

    // Função para classificar se é PCH ou Componente
    function classificarPeca(modelo, quantidade) {
      if (COMPONENTES.includes(modelo)) {
        return { pch: 0, componentes: quantidade };
      } else if (modelo === "Tera Polaina LD" || modelo === "Tera Polaina LE") {
        // Cada polaina forma 1 PCH
        return { pch: Math.floor(quantidade / 2), componentes: quantidade };
      } else {
        return { pch: quantidade, componentes: 0 };
      }
    }

    // Função principal de inicialização
    async function inicializarApp() {
      console.log('Iniciando aplicação...');
      
      try {
        // Inicializar Supabase
        if (window.supabase && window.supabase.createClient) {
          supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);
          console.log('Supabase inicializado com sucesso');
        } else {
          throw new Error('Supabase não está disponível');
        }

        // Restaurar filtros persistentes
        restaurarFiltros();

        // Verificar usuário logado
        const savedUser = localStorage.getItem('usuarioLogado');
        if (savedUser) {
          usuarioLogado = savedUser;
          mostrarUsuarioLogado();
        }

        // Configurar event listeners
        configurarEventListeners();

        // Inicializar formulários
        inicializarFormularios();

        // Inicializar gráficos
        inicializarGraficos();

        // Carregar dados iniciais
        await atualizarDashboard();

        // Carregar configurações de consumo
        await carregarConfiguracoes();

        // Configurar auto refresh
        refreshInterval = setInterval(atualizarDashboard, 30000);

        console.log('Aplicação inicializada com sucesso');
      } catch (error) {
        console.error('Erro ao inicializar aplicação:', error);
        alert('Erro ao carregar o sistema. Por favor, recarregue a página.');
      }
    }

    // Funções de navegação por tabs
    function mostrarTab(tabId) {
      // Remover active de todas as tabs
      document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
      });
      
      // Esconder todo conteúdo
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
      });
      
      // Mostrar tab selecionada
      document.getElementById(tabId).classList.add('active');
      
      // Ativar botão da tab
      if (tabId === 'consumo-tab') {
        document.querySelector('[onclick="mostrarTab(\'consumo-tab\')"]').classList.add('active');
        
        // Sincronizar filtros iniciais se estiverem vazios
        const consumoDataInicial = document.getElementById('filtroConsumoDataInicial').value;
        const consumoDataFinal = document.getElementById('filtroConsumoDataFinal').value;
        
        if (!consumoDataInicial || !consumoDataFinal) {
          const dashboardDataInicial = document.getElementById('filtroDataInicial').value;
          const dashboardDataFinal = document.getElementById('filtroDataFinal').value;
          const dashboardTurno = document.getElementById('filtroTurno').value;
          
          if (dashboardDataInicial) document.getElementById('filtroConsumoDataInicial').value = dashboardDataInicial;
          if (dashboardDataFinal) document.getElementById('filtroConsumoDataFinal').value = dashboardDataFinal;
          if (dashboardTurno) document.getElementById('filtroConsumoTurno').value = dashboardTurno;
        }
        
        // Atualizar dados de consumo
        atualizarPaginaConsumo();
        
        // Mostrar botões de configuração apenas para admin
        if (usuarioLogado === 'admin') {
          document.getElementById('btnConfigConsumo').style.display = 'flex';
          document.getElementById('btnGerenciarPPF').style.display = 'flex';
        }
      } else {
        document.querySelector('[onclick="mostrarTab(\'dashboard-tab\')"]').classList.add('active');
        
        // Esconder botões de configuração do consumo
        document.getElementById('btnConfigConsumo').style.display = 'none';
        document.getElementById('btnGerenciarPPF').style.display = 'none';
      }
    }

    // Mostrar tabs de configuração
    function mostrarConfigTab(tabId) {
      // Remover active de todas as tabs
      document.querySelectorAll('.config-tab').forEach(tab => {
        tab.classList.remove('active');
      });
      
      // Esconder todo conteúdo
      document.querySelectorAll('.config-tab-content').forEach(content => {
        content.classList.remove('active');
      });
      
      // Mostrar tab selecionada
      document.getElementById(`config-${tabId}`).classList.add('active');
      
      // Ativar botão da tab
      document.querySelector(`[onclick="mostrarConfigTab('${tabId}')"]`).classList.add('active');
      
      // Gerar conteúdo específico se necessário
      if (tabId === 'especificas') {
        gerarConfigEspecificas();
      }
    }

    // Gerar configurações específicas
    function gerarConfigEspecificas() {
      const container = document.getElementById('configEspecificasContainer');
      container.innerHTML = '';
      
      configuracaoConsumo.especificas.forEach((config, index) => {
        const div = document.createElement('div');
        div.className = 'config-item';
        div.innerHTML = `
          <h4>
            📦 ${config.modelo} - 🎨 ${config.cor}
            <button type="button" class="remove-config-btn" onclick="removerConfiguracao(${index})">🗑️ Remover</button>
          </h4>
          <div class="config-row">
            <div class="config-field">
              <label>Modelo</label>
              <select onchange="atualizarConfiguracao(${index}, 'modelo', this.value)">
                ${MODELOS.map(m => `<option value="${m}" ${m === config.modelo ? 'selected' : ''}>${m}</option>`).join('')}
              </select>
            </div>
            <div class="config-field">
              <label>Cor</label>
              <select onchange="atualizarConfiguracao(${index}, 'cor', this.value)">
                ${CORES.map(c => `<option value="${c}" ${c === config.cor ? 'selected' : ''}>${c}</option>`).join('')}
              </select>
            </div>
            <div class="config-field">
              <label>Primer (ml/peça)</label>
              <input type="number" value="${config.primer || ''}" placeholder="Ex: 300" min="0" 
                     onchange="atualizarConfiguracao(${index}, 'primer', this.value)">
            </div>
            <div class="config-field">
              <label>Base (ml/peça)</label>
              <input type="number" value="${config.base || ''}" placeholder="Ex: 250" min="0" 
                     onchange="atualizarConfiguracao(${index}, 'base', this.value)">
            </div>
            <div class="config-field">
              <label>Verniz (ml/peça)</label>
              <input type="number" value="${config.verniz || ''}" placeholder="Ex: 200" min="0" 
                     onchange="atualizarConfiguracao(${index}, 'verniz', this.value)">
            </div>
          </div>
        `;
        container.appendChild(div);
      });
    }

    // Adicionar nova configuração
    function adicionarConfiguracao() {
      configuracaoConsumo.especificas.push({
        modelo: MODELOS[0],
        cor: CORES[0],
        primer: '',
        base: '',
        verniz: ''
      });
      gerarConfigEspecificas();
    }

    // Atualizar configuração
    function atualizarConfiguracao(index, campo, valor) {
      if (configuracaoConsumo.especificas[index]) {
        configuracaoConsumo.especificas[index][campo] = valor;
      }
    }

    // Remover configuração
    function removerConfiguracao(index) {
      if (confirm('Tem certeza que deseja remover esta configuração?')) {
        configuracaoConsumo.especificas.splice(index, 1);
        gerarConfigEspecificas();
      }
    }

    // Carregar configurações de consumo do localStorage (fallback) ou Supabase
    async function carregarConfiguracoes() {
      try {
        // Tentar carregar do Supabase primeiro
        const { data: configData, error } = await supabase
          .from('configuracao_consumo_v2')
          .select('*')
          .single();
        
        if (!error && configData && configData.configuracao) {
          configuracaoConsumo = {
            ...configuracaoConsumo,
            ...configData.configuracao
          };
          
          // Garantir que ppf existe
          if (!configuracaoConsumo.ppf) {
            configuracaoConsumo.ppf = [];
          }
          
          console.log('Configurações carregadas do Supabase');
          return;
        }
      } catch (error) {
        console.log('Erro ao carregar do Supabase, usando localStorage:', error);
      }

      // Fallback para localStorage
      const savedConfig = localStorage.getItem('configuracaoConsumo');
      if (savedConfig) {
        try {
          const parsedConfig = JSON.parse(savedConfig);
          configuracaoConsumo = {
            ...configuracaoConsumo,
            ...parsedConfig
          };
          
          // Garantir que ppf existe
          if (!configuracaoConsumo.ppf) {
            configuracaoConsumo.ppf = [];
          }
          
          console.log('Configurações carregadas do localStorage');
        } catch (error) {
          console.error('Erro ao parsear configurações do localStorage:', error);
        }
      }
      
      // Garantir que ppf sempre existe, mesmo se não havia configuração salva
      if (!configuracaoConsumo.ppf) {
        configuracaoConsumo.ppf = [];
      }
    }

    // Obter consumo específico considerando configurações específicas
    function obterConsumo(tipo, modelo, cor) {
      // Buscar configuração específica para este modelo e cor
      const configEspecifica = configuracaoConsumo.especificas.find(c => 
        c.modelo === modelo && c.cor === cor && c[tipo]
      );
      
      if (configEspecifica && configEspecifica[tipo]) {
        return parseFloat(configEspecifica[tipo]);
      }
      
      // Usar valor padrão se não houver configuração específica
      const valoresPadrao = {
        primer: 300,
        base: 300,
        verniz: 300
      };
      
      return valoresPadrao[tipo] || 300;
    }

    // Abrir modal de configuração
    function abrirModalConfig() {
      if (usuarioLogado !== 'admin') {
        alert('Apenas administradores podem alterar as configurações!');
        return;
      }
      
      // Preencher campos com valores atuais
      document.getElementById('primerDiluicao').value = configuracaoConsumo.geral.primer.taxa_diluicao;
      document.getElementById('primerDiluente').value = configuracaoConsumo.geral.primer.diluente;
      
      document.getElementById('baseDiluicao').value = configuracaoConsumo.geral.base.taxa_diluicao;
      document.getElementById('baseDiluente').value = configuracaoConsumo.geral.base.diluente;
      
      document.getElementById('vernizDiluicao').value = configuracaoConsumo.geral.verniz.taxa_diluicao;
      document.getElementById('vernizDiluente').value = configuracaoConsumo.geral.verniz.diluente;
      document.getElementById('vernizCatalisador').value = configuracaoConsumo.geral.verniz.taxa_catalisador;
      
      // Mostrar configurações específicas
      gerarConfigEspecificas();
      
      document.getElementById('modalConfig').classList.add('active');
    }

    // Fechar modal de configuração
    function fecharModalConfig() {
      document.getElementById('modalConfig').classList.remove('active');
    }

    // Salvar configurações
    async function salvarConfiguracoes() {
      if (usuarioLogado !== 'admin') {
        alert('Apenas administradores podem salvar configurações!');
        return;
      }
      
      try {
        // Atualizar configurações gerais
        configuracaoConsumo.geral.primer.taxa_diluicao = parseFloat(document.getElementById('primerDiluicao').value);
        configuracaoConsumo.geral.primer.diluente = document.getElementById('primerDiluente').value;
        
        configuracaoConsumo.geral.base.taxa_diluicao = parseFloat(document.getElementById('baseDiluicao').value);
        configuracaoConsumo.geral.base.diluente = document.getElementById('baseDiluente').value;
        
        configuracaoConsumo.geral.verniz.taxa_diluicao = parseFloat(document.getElementById('vernizDiluicao').value);
        configuracaoConsumo.geral.verniz.diluente = document.getElementById('vernizDiluente').value;
        configuracaoConsumo.geral.verniz.taxa_catalisador = parseFloat(document.getElementById('vernizCatalisador').value);
        
        await salvarConfiguracoesSupabase();
        
        alert('Configurações salvas com sucesso!');
        fecharModalConfig();
        atualizarPaginaConsumo();
        
      } catch (error) {
        console.error('Erro ao salvar configurações:', error);
        alert('Erro ao salvar configurações!');
      }
    }

    // Função auxiliar para salvar no Supabase
    async function salvarConfiguracoesSupabase() {
      // Salvar no localStorage como backup
      localStorage.setItem('configuracaoConsumo', JSON.stringify(configuracaoConsumo));
      
      try {
        // Verificar se já existe um registro
        const { data: existingData, error: selectError } = await supabase
          .from('configuracao_consumo_v2')
          .select('id')
          .single();
        
        if (existingData) {
          // Atualizar registro existente
          const { error: updateError } = await supabase
            .from('configuracao_consumo_v2')
            .update({
              configuracao: configuracaoConsumo,
              updated_at: new Date().toISOString()
            })
            .eq('id', existingData.id);
          
          if (updateError) throw updateError;
        } else {
          // Criar novo registro
          const { error: insertError } = await supabase
            .from('configuracao_consumo_v2')
            .insert({
              configuracao: configuracaoConsumo,
              created_at: new Date().toISOString()
            });
          
          if (insertError) throw insertError;
        }
        
        console.log('Configurações salvas no Supabase');
      } catch (supabaseError) {
        console.warn('Erro ao salvar no Supabase, usando apenas localStorage:', supabaseError);
        throw supabaseError; // Re-throw para mostrar o erro ao usuário se necessário
      }
    }

    // Atualizar página de consumo
    async function atualizarPaginaConsumo() {
      // Buscar dados do período selecionado nos filtros de consumo
      const dataInicial = document.getElementById('filtroConsumoDataInicial').value;
      const dataFinal = document.getElementById('filtroConsumoDataFinal').value;
      const turno = document.getElementById('filtroConsumoTurno').value;
      
      if (!dataInicial || !dataFinal) {
        alert('Por favor, selecione as datas inicial e final para análise de consumo');
        return;
      }
      
      try {
        // Buscar registros
        let { data: registros, error } = await supabase
          .from('registros')
          .select('*')
          .gte('data', dataInicial)
          .lte('data', dataFinal);
        
        if (error) throw error;
        
        // Filtrar por turno se necessário
        if (turno && registros) {
          registros = registros.filter(r => {
            const hora = parseInt(r.hora.split('h')[0]);
            if (turno === '1T') return hora >= 6 && hora < 15;
            if (turno === '2T') return hora >= 15 && hora <= 23;
            if (turno === '3T') return hora >= 0 && hora < 6;
            return true;
          });
        }
        
        // Processar dados
        const consumoDetalhado = calcularConsumoDetalhado(registros || []);
        
        // Atualizar cards de resumo
        atualizarCardsConsumo(consumoDetalhado, registros || []);
        
        // Atualizar tabela hora a hora
        atualizarTabelaHoraHora(registros || []);
        
        // Atualizar gráfico de modelos
        atualizarGraficoModelosPintados(consumoDetalhado);
        
        // Atualizar gráfico de cores
        atualizarGraficoCoresPintadas(consumoDetalhado);
        
        // Atualizar tabelas
        atualizarTabelaConsumoDetalhado(consumoDetalhado);
        atualizarTabelaResumoMaterial(consumoDetalhado);
        
        // Atualizar tabela PPF
        atualizarTabelaPPF();
        
      } catch (error) {
        console.error('Erro ao atualizar página de consumo:', error);
      }
    }

    // Calcular consumo detalhado
    function calcularConsumoDetalhado(registros) {
      const consumoPorModeloCor = {};
      const resumoTotal = {
        primer: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 },
        base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 },
        verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 },
        totalPecas: 0,
        totalPCH: 0,
        totalComponentes: 0
      };

      // Resumo por cor específica
      const resumoPorCor = {
        'Primer P&A': { primer: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 } },
        'Branco': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'Prata': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'Preto': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'Platinum': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'Vermelho': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'Azul Biscay': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'HyperNova': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'IceBird': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } },
        'ClearWater': { base: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0 }, verniz: { puro: 0, diluenteX: 0, diluenteY: 0, diluenteZ: 0, catalisador: 0 } }
      };

      // Para encontrar o modelo+cor que mais pintou
      const quantidadePorModeloCor = {};
      const quantidadePorCor = {};
      
      registros.forEach(r => {
        if (r.producao && Array.isArray(r.producao)) {
          r.producao.forEach(p => {
            const chave = `${p.modelo}|${p.cor}|${p.repintura ? 'Repintura' : 'Normal'}`;
            const chaveModeloCor = `${p.modelo}|${p.cor}`;
            
            // Classificar peça
            const classificacao = classificarPeca(p.modelo, p.qtd || 0);
            resumoTotal.totalPCH += classificacao.pch;
            resumoTotal.totalComponentes += classificacao.componentes;
            
            // Acumular quantidade para encontrar o que mais pintou
            if (!quantidadePorModeloCor[chaveModeloCor]) {
              quantidadePorModeloCor[chaveModeloCor] = 0;
            }
            quantidadePorModeloCor[chaveModeloCor] += p.qtd || 0;
            
            // Acumular por cor
            if (!quantidadePorCor[p.cor]) {
              quantidadePorCor[p.cor] = 0;
            }
            quantidadePorCor[p.cor] += p.qtd || 0;
            
            if (!consumoPorModeloCor[chave]) {
              consumoPorModeloCor[chave] = {
                modelo: p.modelo,
                cor: p.cor,
                quantidade: 0,
                tipo: p.repintura ? 'Repintura' : 'Normal',
                consumo: {
                  primer: { puro: 0, diluente: 0, catalisador: 0 },
                  base: { puro: 0, diluente: 0, catalisador: 0 },
                  verniz: { puro: 0, diluente: 0, catalisador: 0 }
                }
              };
            }
            
            consumoPorModeloCor[chave].quantidade += p.qtd || 0;
            resumoTotal.totalPecas += p.qtd || 0;
            
            // Calcular consumo para cada tipo usando configurações específicas
            const tiposParaCalcular = p.cor === 'Primer P&A' ? ['primer'] : ['primer', 'base', 'verniz'];
            
            tiposParaCalcular.forEach(tipo => {
              const consumoMl = obterConsumo(tipo, p.modelo, p.cor);
              const configGeral = configuracaoConsumo.geral[tipo];
              
              const consumoTotal = (p.qtd * consumoMl) / 1000; // Converter para litros
              const taxaDiluicao = configGeral.taxa_diluicao / 100;
              const taxaCatalisador = configGeral.taxa_catalisador / 100;
              
              const puro = consumoTotal / (1 + taxaDiluicao + taxaCatalisador);
              const diluente = puro * taxaDiluicao;
              const catalisador = puro * taxaCatalisador;
              
              consumoPorModeloCor[chave].consumo[tipo].puro += puro;
              consumoPorModeloCor[chave].consumo[tipo].diluente += diluente;
              consumoPorModeloCor[chave].consumo[tipo].catalisador += catalisador;
              
              resumoTotal[tipo].puro += puro;
              if (configGeral.diluente === 'X') {
                resumoTotal[tipo].diluenteX += diluente;
              } else if (configGeral.diluente === 'Y') {
                resumoTotal[tipo].diluenteY += diluente;
              } else if (configGeral.diluente === 'Z') {
                resumoTotal[tipo].diluenteZ += diluente;
              }
              resumoTotal[tipo].catalisador += catalisador;
              
              // Acumular por cor específica
              if (resumoPorCor[p.cor] && resumoPorCor[p.cor][tipo]) {
                resumoPorCor[p.cor][tipo].puro += puro;
                if (configGeral.diluente === 'X') {
                  resumoPorCor[p.cor][tipo].diluenteX += diluente;
                } else if (configGeral.diluente === 'Y') {
                  resumoPorCor[p.cor][tipo].diluenteY += diluente;
                } else if (configGeral.diluente === 'Z') {
                  resumoPorCor[p.cor][tipo].diluenteZ += diluente;
                }
                if (resumoPorCor[p.cor][tipo].catalisador !== undefined) {
                  resumoPorCor[p.cor][tipo].catalisador += catalisador;
                }
              }
            });
          });
        }
      });

      // Encontrar top 5 modelo+cor que mais pintou
      const top5ModeloCor = Object.entries(quantidadePorModeloCor)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([chaveModeloCor, quantidade]) => {
          const [modelo, cor] = chaveModeloCor.split('|');
          return { modelo, cor, quantidade };
        });
      
      // Encontrar top 5 cores mais pintadas
      const top5Cores = Object.entries(quantidadePorCor)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([cor, quantidade]) => ({ cor, quantidade }));
      
      return { 
        detalhado: consumoPorModeloCor, 
        resumo: resumoTotal,
        resumoPorCor: resumoPorCor,
        top5ModeloCor: top5ModeloCor,
        top5Cores: top5Cores
      };
    }

    // Atualizar cards de consumo
    function atualizarCardsConsumo(dados, registros) {
      const container = document.getElementById('consumoSummaryCards');
      container.innerHTML = '';
      
      const resumo = dados.resumo;
      
      // Card Total de PCH e Componentes
      const cardPecas = criarCardConsumo('📦 Total de Peças Pintadas', [
        { label: 'Para-choques (PCH)', value: resumo.totalPCH.toLocaleString('pt-BR') },
        { label: 'Componentes', value: resumo.totalComponentes.toLocaleString('pt-BR') },
        { label: 'Total Geral', value: resumo.totalPecas.toLocaleString('pt-BR') }
      ]);
      container.appendChild(cardPecas);
      
      // Card Top 5 Modelo + Cor Mais Pintado
      const cardTop5ModeloCor = document.createElement('div');
      cardTop5ModeloCor.className = 'consumo-summary-card';
      cardTop5ModeloCor.innerHTML = `
        <h3>🏆 Top 5 Modelo + Cor Mais Pintados</h3>
        <ul class="top-list">
          ${dados.top5ModeloCor.map((item, index) => `
            <li>
              <span class="rank">${index + 1}</span>
              <span class="item-info">${item.modelo} - ${item.cor}</span>
              <span class="item-value">${item.quantidade}</span>
            </li>
          `).join('')}
        </ul>
      `;
      container.appendChild(cardTop5ModeloCor);
      
      // Card Top 5 Cores Mais Pintadas
      const cardTop5Cores = document.createElement('div');
      cardTop5Cores.className = 'consumo-summary-card';
      cardTop5Cores.innerHTML = `
        <h3>🎨 Top 5 Cores Mais Pintadas</h3>
        <ul class="top-list">
          ${dados.top5Cores.map((item, index) => `
            <li>
              <span class="rank">${index + 1}</span>
              <span class="item-info">${item.cor}</span>
              <span class="item-value">${item.quantidade}</span>
            </li>
          `).join('')}
        </ul>
      `;
      container.appendChild(cardTop5Cores);
      
      // Card Consumo Total
      const consumoTotal = resumo.primer.puro + resumo.base.puro + resumo.verniz.puro +
                          resumo.primer.diluenteX + resumo.primer.diluenteY + resumo.primer.diluenteZ +
                          resumo.base.diluenteX + resumo.base.diluenteY + resumo.base.diluenteZ +
                          resumo.verniz.diluenteX + resumo.verniz.diluenteY + resumo.verniz.diluenteZ +
                          resumo.primer.catalisador + resumo.base.catalisador + resumo.verniz.catalisador;
      
      const cardConsumoTotal = criarCardConsumo('🎨 Consumo Total', [
        { label: 'Volume Total', value: `${consumoTotal.toFixed(2)} L` },
        { label: 'Material Puro', value: `${(resumo.primer.puro + resumo.base.puro + resumo.verniz.puro).toFixed(2)} L` },
        { label: 'Diluentes', value: `${(resumo.primer.diluenteX + resumo.primer.diluenteY + resumo.primer.diluenteZ + resumo.base.diluenteX + resumo.base.diluenteY + resumo.base.diluenteZ + resumo.verniz.diluenteX + resumo.verniz.diluenteY + resumo.verniz.diluenteZ).toFixed(2)} L` },
        { label: 'Catalisador', value: `${(resumo.verniz.catalisador).toFixed(2)} L` }
      ]);
      container.appendChild(cardConsumoTotal);
      
      // Card Diluentes
      const totalDiluenteX = resumo.primer.diluenteX + resumo.base.diluenteX + resumo.verniz.diluenteX;
      const totalDiluenteY = resumo.primer.diluenteY + resumo.base.diluenteY + resumo.verniz.diluenteY;
      const totalDiluenteZ = resumo.primer.diluenteZ + resumo.base.diluenteZ + resumo.verniz.diluenteZ;
      
      const cardDiluentes = criarCardConsumo('🧪 Consumo de Diluentes', [
        { label: 'Diluente X', value: `${totalDiluenteX.toFixed(2)} L` },
        { label: 'Diluente Y', value: `${totalDiluenteY.toFixed(2)} L` },
        { label: 'Diluente Z', value: `${totalDiluenteZ.toFixed(2)} L` }
      ]);
      container.appendChild(cardDiluentes);
    }

    // Criar card de consumo
    function criarCardConsumo(titulo, metricas) {
      const card = document.createElement('div');
      card.className = 'consumo-summary-card';
      
      let html = `<h3>${titulo}</h3>`;
      
      metricas.forEach(metrica => {
        html += `
          <div class="consumo-metric">
            <span class="metric-label">${metrica.label}</span>
            <span class="metric-value">${metrica.value}</span>
          </div>
        `;
      });
      
      card.innerHTML = html;
      return card;
    }

    // Atualizar tabela hora a hora
    function atualizarTabelaHoraHora(registros) {
      const container = document.getElementById('horaHoraContainer');
      
      // Agrupar dados por hora
      const dadosPorHora = {};
      const modelosUnicos = new Set();
      
      registros.forEach(r => {
        if (r.producao && Array.isArray(r.producao)) {
          r.producao.forEach(p => {
            modelosUnicos.add(p.modelo);
            
            const chave = `${r.hora}|${p.modelo}`;
            if (!dadosPorHora[chave]) {
              dadosPorHora[chave] = 0;
            }
            dadosPorHora[chave] += p.qtd || 0;
          });
        }
      });
      
      const modelosArray = Array.from(modelosUnicos).sort();
      const horasUnicas = [...new Set(registros.map(r => r.hora))].sort((a, b) => {
        const ha = parseInt(a.slice(0, 2), 10);
        const hb = parseInt(b.slice(0, 2), 10);
        return ha - hb;
      });
      
      if (horasUnicas.length === 0 || modelosArray.length === 0) {
        container.innerHTML = '<p>Nenhum dado disponível</p>';
        return;
      }
      
      // Criar tabela
      let html = `
        <table>
          <thead>
            <tr>
              <th>Modelo</th>
              ${horasUnicas.map(hora => `<th>${hora.split(' ')[0]}</th>`).join('')}
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      modelosArray.forEach(modelo => {
        let totalModelo = 0;
        html += `<tr><td class="model-cell">${modelo}</td>`;
        
        horasUnicas.forEach(hora => {
          const quantidade = dadosPorHora[`${hora}|${modelo}`] || 0;
          totalModelo += quantidade;
          html += `<td>${quantidade > 0 ? quantidade : ''}</td>`;
        });
        
        html += `<td><strong>${totalModelo}</strong></td></tr>`;
      });
      
      html += '</tbody></table>';
      container.innerHTML = html;
    }

    // Atualizar gráfico de modelos mais pintados
    function atualizarGraficoModelosPintados(dados) {
      const ctx = document.getElementById('graficoModelosPintados').getContext('2d');
      
      // Agrupar por modelo
      const quantidadePorModelo = {};
      Object.values(dados.detalhado).forEach(item => {
        if (!quantidadePorModelo[item.modelo]) {
          quantidadePorModelo[item.modelo] = 0;
        }
        quantidadePorModelo[item.modelo] += item.quantidade;
      });
      
      // Ordenar e pegar top 10
      const modelosOrdenados = Object.entries(quantidadePorModelo)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);
      
      const labels = modelosOrdenados.map(([modelo]) => modelo);
      const valores = modelosOrdenados.map(([, qtd]) => qtd);
      
      // Destruir gráfico anterior se existir
      if (chartModelosPintados) {
        chartModelosPintados.destroy();
        chartModelosPintados = null;
      }
      
      // Criar novo gráfico
      chartModelosPintados = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Quantidade Pintada',
            data: valores,
            backgroundColor: '#1976d2',
            borderColor: '#1565c0',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Quantidade'
              }
            }
          }
        }
      });
    }

    // Atualizar gráfico de cores mais pintadas
    function atualizarGraficoCoresPintadas(dados) {
      const ctx = document.getElementById('graficoCoresPintadas').getContext('2d');
      
      // Usar dados já calculados do top 5
      const labels = dados.top5Cores.map(item => item.cor);
      const valores = dados.top5Cores.map(item => item.quantidade);
      
      // Cores para o gráfico
      const cores = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'];
      
      // Destruir gráfico anterior se existir
      if (chartCoresPintadas) {
        chartCoresPintadas.destroy();
        chartCoresPintadas = null;
      }
      
      // Criar novo gráfico
      chartCoresPintadas = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            data: valores,
            backgroundColor: cores,
            borderWidth: 2,
            borderColor: '#fff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }

    // Atualizar tabela de consumo detalhado
    function atualizarTabelaConsumoDetalhado(dados) {
      const tbody = document.getElementById('tabelaConsumoBody');
      tbody.innerHTML = '';
      
      // Ordenar alfabeticamente por modelo, depois por cor
      const itensOrdenados = Object.values(dados.detalhado).sort((a, b) => {
        if (a.modelo !== b.modelo) {
          return a.modelo.localeCompare(b.modelo);
        }
        return a.cor.localeCompare(b.cor);
      });

      // Identificar o modelo+cor que mais pintou para destacar
      const modeloCorDestaque = dados.top5ModeloCor.length > 0 ? 
        `${dados.top5ModeloCor[0].modelo}|${dados.top5ModeloCor[0].cor}` : null;
      
      itensOrdenados.forEach(item => {
        const consumoTotal = item.consumo.primer.puro + item.consumo.primer.diluente + item.consumo.primer.catalisador +
                           item.consumo.base.puro + item.consumo.base.diluente + item.consumo.base.catalisador +
                           item.consumo.verniz.puro + item.consumo.verniz.diluente + item.consumo.verniz.catalisador;
        
        const materialPuro = item.consumo.primer.puro + item.consumo.base.puro + item.consumo.verniz.puro;
        const diluente = item.consumo.primer.diluente + item.consumo.base.diluente + item.consumo.verniz.diluente;
        const catalisador = item.consumo.verniz.catalisador;
        
        const tr = document.createElement('tr');
        
        // Destacar o modelo+cor que mais pintou
        const chaveAtual = `${item.modelo}|${item.cor}`;
        if (modeloCorDestaque === chaveAtual) {
          tr.className = 'modelo-destaque';
        }
        
        tr.innerHTML = `
          <td>${item.modelo}</td>
          <td>${item.cor}</td>
          <td>${item.quantidade}</td>
          <td>${item.tipo}</td>
          <td>${consumoTotal.toFixed(3)}</td>
          <td>${materialPuro.toFixed(3)}</td>
          <td>${diluente.toFixed(3)}</td>
          <td>${catalisador.toFixed(3)}</td>
        `;
        tbody.appendChild(tr);
      });
    }

    // Atualizar tabela de resumo por material (simplificada)
    function atualizarTabelaResumoMaterial(dados) {
      const tbody = document.getElementById('tabelaResumoMaterialBody');
      tbody.innerHTML = '';
      
      const resumo = dados.resumo || {};
      const resumoPorCor = dados.resumoPorCor || {};
      const materiaisConsumidos = [];
      
      // Primer
      if (resumo.primer) {
        const totalPrimer = (resumo.primer.puro || 0) + (resumo.primer.diluenteX || 0) + 
                           (resumo.primer.diluenteY || 0) + (resumo.primer.diluenteZ || 0);
        if (totalPrimer > 0) {
          materiaisConsumidos.push({
            nome: 'Primer',
            total: totalPrimer
          });
        }
      }
      
      // Bases por cor
      const coresBases = ['Azul Biscay', 'Branco', 'ClearWater', 'HyperNova', 'IceBird', 'Platinum', 'Prata', 'Preto', 'Vermelho'];
      
      coresBases.forEach(cor => {
        if (resumoPorCor[cor] && resumoPorCor[cor].base) {
          const base = resumoPorCor[cor].base;
          const totalBase = (base.puro || 0) + (base.diluenteX || 0) + 
                           (base.diluenteY || 0) + (base.diluenteZ || 0);
          if (totalBase > 0) {
            materiaisConsumidos.push({
              nome: `Base ${cor}`,
              total: totalBase
            });
          }
        }
      });
      
      // Verniz
      if (resumo.verniz) {
        const totalVerniz = (resumo.verniz.puro || 0) + (resumo.verniz.diluenteX || 0) + 
                           (resumo.verniz.diluenteY || 0) + (resumo.verniz.diluenteZ || 0) + 
                           (resumo.verniz.catalisador || 0);
        if (totalVerniz > 0) {
          materiaisConsumidos.push({
            nome: 'Verniz',
            total: totalVerniz
          });
        }
      }
      
      // Diluentes
      if (resumo.primer && resumo.base && resumo.verniz) {
        const totalDiluenteX = (resumo.primer.diluenteX || 0) + (resumo.base.diluenteX || 0) + (resumo.verniz.diluenteX || 0);
        const totalDiluenteY = (resumo.primer.diluenteY || 0) + (resumo.base.diluenteY || 0) + (resumo.verniz.diluenteY || 0);
        const totalDiluenteZ = (resumo.primer.diluenteZ || 0) + (resumo.base.diluenteZ || 0) + (resumo.verniz.diluenteZ || 0);
        
        if (totalDiluenteX > 0) {
          materiaisConsumidos.push({
            nome: 'Diluente X',
            total: totalDiluenteX,
            classe: 'diluente-x'
          });
        }
        
        if (totalDiluenteY > 0) {
          materiaisConsumidos.push({
            nome: 'Diluente Y',
            total: totalDiluenteY,
            classe: 'diluente-y'
          });
        }
        
        if (totalDiluenteZ > 0) {
          materiaisConsumidos.push({
            nome: 'Diluente Z',
            total: totalDiluenteZ,
            classe: 'diluente-z'
          });
        }
      }
      
      // Catalisador
      if (resumo.verniz && (resumo.verniz.catalisador || 0) > 0) {
        materiaisConsumidos.push({
          nome: 'Catalisador',
          total: resumo.verniz.catalisador,
          classe: 'catalisador'
        });
      }
      
      // Ordenar alfabeticamente
      materiaisConsumidos.sort((a, b) => a.nome.localeCompare(b.nome));
      
      // Adicionar linhas à tabela
      materiaisConsumidos.forEach(material => {
        const tr = document.createElement('tr');
        if (material.classe) {
          if (material.classe === 'diluente-x') tr.style.backgroundColor = '#e3f2fd';
          if (material.classe === 'diluente-y') tr.style.backgroundColor = '#e8f5e8';
          if (material.classe === 'diluente-z') tr.style.backgroundColor = '#fce4ec';
          if (material.classe === 'catalisador') tr.style.backgroundColor = '#fff3e0';
        }
        
        tr.innerHTML = `
          <td>${material.nome}</td>
          <td>${material.total.toFixed(3)}</td>
        `;
        tbody.appendChild(tr);
      });
      
      // Total Geral
      const totalGeral = materiaisConsumidos.reduce((sum, material) => sum + material.total, 0);
      
      const trTotal = document.createElement('tr');
      trTotal.style.fontWeight = 'bold';
      trTotal.style.backgroundColor = '#f5f5f5';
      trTotal.style.borderTop = '2px solid #ddd';
      trTotal.innerHTML = `
        <td>TOTAL GERAL</td>
        <td>${totalGeral.toFixed(3)}</td>
      `;
      tbody.appendChild(trTotal);
    }

    // Atualizar tabela PPF (Processo Padrão de Fabricação)
    function atualizarTabelaPPF() {
      const tbody = document.getElementById('tabelaPPFBody');
      tbody.innerHTML = '';
      
      // Garantir que ppf existe
      if (!configuracaoConsumo.ppf) {
        configuracaoConsumo.ppf = [];
      }
      
      // Mostrar colunas de ações apenas para admin
      const colAcoes = document.getElementById('acoesPPF');
      if (usuarioLogado === 'admin') {
        colAcoes.style.display = 'table-cell';
      } else {
        colAcoes.style.display = 'none';
      }
      
      // Se não há itens configurados na PPF, mostrar alguns exemplos padrão
      if (configuracaoConsumo.ppf.length === 0) {
        const exemplosPadrao = [
          { modelo: 'Polo PA DT', cor: 'Branco' },
          { modelo: 'Polo PA DT', cor: 'Prata' },
          { modelo: 'Virtus DT', cor: 'Preto' }
        ];
        configuracaoConsumo.ppf = exemplosPadrao;
      }
      
      // Gerar linhas apenas para os itens configurados
      configuracaoConsumo.ppf.forEach((item, index) => {
        const modelo = item.modelo;
        const cor = item.cor;
        
        // Calcular consumos
        const consumoPrimer = obterConsumo('primer', modelo, cor);
        const consumoBase = obterConsumo('base', modelo, cor);
        const consumoVerniz = obterConsumo('verniz', modelo, cor);
        
        const configPrimer = configuracaoConsumo.geral.primer;
        const configBase = configuracaoConsumo.geral.base;
        const configVerniz = configuracaoConsumo.geral.verniz;
        
        // Calcular diluentes e catalisador
        const diluentePrimer = (consumoPrimer * configPrimer.taxa_diluicao) / 100;
        const diluenteBase = (consumoBase * configBase.taxa_diluicao) / 100;
        const diluenteVerniz = (consumoVerniz * configVerniz.taxa_diluicao) / 100;
        const catalisador = (consumoVerniz * configVerniz.taxa_catalisador) / 100;
        
        let diluenteX = 0, diluenteY = 0, diluenteZ = 0;
        
        // Somar diluentes por tipo
        if (configPrimer.diluente === 'X') diluenteX += diluentePrimer;
        else if (configPrimer.diluente === 'Y') diluenteY += diluentePrimer;
        else if (configPrimer.diluente === 'Z') diluenteZ += diluentePrimer;
        
        if (cor !== 'Primer P&A') {
          if (configBase.diluente === 'X') diluenteX += diluenteBase;
          else if (configBase.diluente === 'Y') diluenteY += diluenteBase;
          else if (configBase.diluente === 'Z') diluenteZ += diluenteBase;
          
          if (configVerniz.diluente === 'X') diluenteX += diluenteVerniz;
          else if (configVerniz.diluente === 'Y') diluenteY += diluenteVerniz;
          else if (configVerniz.diluente === 'Z') diluenteZ += diluenteVerniz;
        }
        
        const totalPorPeca = (cor === 'Primer P&A' ? consumoPrimer + diluentePrimer : 
                             consumoPrimer + consumoBase + consumoVerniz + diluenteX + diluenteY + diluenteZ + catalisador);
        
        const tr = document.createElement('tr');
        
        let acaoBtn = '';
        if (usuarioLogado === 'admin') {
          acaoBtn = `<td><button class="btnDel" onclick="removerItemPPF(${index})">🗑️</button></td>`;
        }
        
        tr.innerHTML = `
          <td>${modelo} - ${cor}</td>
          <td>${consumoPrimer.toFixed(1)}</td>
          <td>${cor === 'Primer P&A' ? '0.0' : consumoBase.toFixed(1)}</td>
          <td>${cor === 'Primer P&A' ? '0.0' : consumoVerniz.toFixed(1)}</td>
          <td>${diluenteX.toFixed(1)}</td>
          <td>${diluenteY.toFixed(1)}</td>
          <td>${diluenteZ.toFixed(1)}</td>
          <td>${catalisador.toFixed(1)}</td>
          <td><strong>${totalPorPeca.toFixed(1)}</strong></td>
          ${acaoBtn}
        `;
        
        // Destacar linhas com configurações específicas
        const hasConfigEspecifica = configuracaoConsumo.especificas && 
          configuracaoConsumo.especificas.some(c => c.modelo === modelo && c.cor === cor);
        
        if (hasConfigEspecifica) {
          tr.style.backgroundColor = '#fff3cd';
          tr.style.borderLeft = '4px solid #ffc107';
        }
        
        tbody.appendChild(tr);
      });
    }

    // Funções para gerenciar PPF
    function abrirGerenciamentoPPF() {
      if (usuarioLogado !== 'admin') {
        alert('Apenas administradores podem gerenciar a PPF!');
        return;
      }
      
      // Garantir que ppf existe
      if (!configuracaoConsumo.ppf) {
        configuracaoConsumo.ppf = [];
      }
      
      gerarPPFContainer();
      document.getElementById('modalPPF').classList.add('active');
    }

    function fecharModalPPF() {
      document.getElementById('modalPPF').classList.remove('active');
    }

    function gerarPPFContainer() {
      const container = document.getElementById('ppfContainer');
      container.innerHTML = '';
      
      // Garantir que ppf existe
      if (!configuracaoConsumo.ppf) {
        configuracaoConsumo.ppf = [];
      }
      
      configuracaoConsumo.ppf.forEach((item, index) => {
        const div = document.createElement('div');
        div.className = 'config-item';
        div.innerHTML = `
          <h4>
            📦 ${item.modelo} - 🎨 ${item.cor}
            <button type="button" class="remove-config-btn" onclick="removerItemPPFModal(${index})">🗑️ Remover</button>
          </h4>
          <div class="config-row">
            <div class="config-field">
              <label>Modelo</label>
              <select onchange="atualizarItemPPF(${index}, 'modelo', this.value)">
                ${MODELOS.map(m => `<option value="${m}" ${m === item.modelo ? 'selected' : ''}>${m}</option>`).join('')}
              </select>
            </div>
            <div class="config-field">
              <label>Cor</label>
              <select onchange="atualizarItemPPF(${index}, 'cor', this.value)">
                ${CORES.map(c => `<option value="${c}" ${c === item.cor ? 'selected' : ''}>${c}</option>`).join('')}
              </select>
            </div>
          </div>
        `;
        container.appendChild(div);
      });
    }

    function adicionarItemPPF() {
      // Garantir que ppf existe
      if (!configuracaoConsumo.ppf) {
        configuracaoConsumo.ppf = [];
      }
      
      configuracaoConsumo.ppf.push({
        modelo: MODELOS[0],
        cor: CORES[0]
      });
      gerarPPFContainer();
    }

    function atualizarItemPPF(index, campo, valor) {
      // Garantir que ppf existe
      if (!configuracaoConsumo.ppf) {
        configuracaoConsumo.ppf = [];
      }
      
      if (configuracaoConsumo.ppf[index]) {
        configuracaoConsumo.ppf[index][campo] = valor;
      }
    }

    function removerItemPPFModal(index) {
      if (confirm('Tem certeza que deseja remover esta combinação da PPF?')) {
        // Garantir que ppf existe
        if (!configuracaoConsumo.ppf) {
          configuracaoConsumo.ppf = [];
        }
        
        configuracaoConsumo.ppf.splice(index, 1);
        gerarPPFContainer();
      }
    }

    function removerItemPPF(index) {
      if (usuarioLogado !== 'admin') {
        alert('Apenas administradores podem remover itens da PPF!');
        return;
      }
      
      if (confirm('Tem certeza que deseja remover esta combinação da PPF?')) {
        configuracaoConsumo.ppf.splice(index, 1);
        salvarPPF();
        atualizarTabelaPPF();
      }
    }

    function salvarPPF() {
      if (usuarioLogado !== 'admin') {
        alert('Apenas administradores podem salvar a configuração PPF!');
        return;
      }
      
      try {
        // Salvar no localStorage como backup
        localStorage.setItem('configuracaoConsumo', JSON.stringify(configuracaoConsumo));
        
        alert('Configuração PPF salva com sucesso!');
        fecharModalPPF();
        atualizarTabelaPPF();
        
      } catch (error) {
        console.error('Erro ao salvar PPF:', error);
        alert('Erro ao salvar configuração PPF!');
      }
    }

    // Restaurar filtros do localStorage
    function restaurarFiltros() {
      const savedDateInicial = localStorage.getItem('filtroDataInicial');
      const savedDateFinal = localStorage.getItem('filtroDataFinal');
      const savedTurno = localStorage.getItem('filtroTurno');
      
      const hoje = new Date().toISOString().split('T')[0];
      
      if (savedDateInicial) {
        document.getElementById('filtroDataInicial').value = savedDateInicial;
      } else {
        document.getElementById('filtroDataInicial').value = hoje;
      }
      
      if (savedDateFinal) {
        document.getElementById('filtroDataFinal').value = savedDateFinal;
      } else {
        document.getElementById('filtroDataFinal').value = hoje;
      }
      
      if (savedTurno) {
        document.getElementById('filtroTurno').value = savedTurno;
      }

      // Restaurar filtros de consumo (sincroniza inicialmente com dashboard)
      const savedConsumoDataInicial = localStorage.getItem('filtroConsumoDataInicial');
      const savedConsumoDataFinal = localStorage.getItem('filtroConsumoDataFinal');
      const savedConsumoTurno = localStorage.getItem('filtroConsumoTurno');
      
      if (savedConsumoDataInicial) {
        document.getElementById('filtroConsumoDataInicial').value = savedConsumoDataInicial;
      } else {
        document.getElementById('filtroConsumoDataInicial').value = savedDateInicial || hoje;
      }
      
      if (savedConsumoDataFinal) {
        document.getElementById('filtroConsumoDataFinal').value = savedConsumoDataFinal;
      } else {
        document.getElementById('filtroConsumoDataFinal').value = savedDateFinal || hoje;
      }
      
      if (savedConsumoTurno) {
        document.getElementById('filtroConsumoTurno').value = savedConsumoTurno;
      } else {
        document.getElementById('filtroConsumoTurno').value = savedTurno || '';
      }
    }

    // Salvar filtros no localStorage
    function salvarFiltros() {
      const dataInicial = document.getElementById('filtroDataInicial').value;
      const dataFinal = document.getElementById('filtroDataFinal').value;
      const turno = document.getElementById('filtroTurno').value;
      
      localStorage.setItem('filtroDataInicial', dataInicial);
      localStorage.setItem('filtroDataFinal', dataFinal);
      localStorage.setItem('filtroTurno', turno);
    }

    // Salvar filtros de consumo no localStorage
    function salvarFiltrosConsumo() {
      const dataInicial = document.getElementById('filtroConsumoDataInicial').value;
      const dataFinal = document.getElementById('filtroConsumoDataFinal').value;
      const turno = document.getElementById('filtroConsumoTurno').value;
      
      localStorage.setItem('filtroConsumoDataInicial', dataInicial);
      localStorage.setItem('filtroConsumoDataFinal', dataFinal);
      localStorage.setItem('filtroConsumoTurno', turno);
    }

    // Configurar todos os event listeners
    function configurarEventListeners() {
      // Login/Logout
      document.getElementById('btnLogin').addEventListener('click', fazerLogin);
      document.getElementById('btnLogout').addEventListener('click', fazerLogout);
      
      // Dashboard
      document.getElementById('btnAtualizar').addEventListener('click', async () => {
        salvarFiltros();
        await atualizarDashboard();
      });
      document.getElementById('fabButton').addEventListener('click', abrirFormulario);
      
      // Filtros de Consumo
      document.getElementById('btnAtualizarConsumo').addEventListener('click', async () => {
        salvarFiltrosConsumo();
        await atualizarPaginaConsumo();
      });
      
      // Formulário
      document.getElementById('btnAddParada').addEventListener('click', adicionarParada);
      document.getElementById('btnAddProducao').addEventListener('click', adicionarProducao);
      document.getElementById('btnSalvar').addEventListener('click', adicionarRegistro);
      document.getElementById('btnVoltar').addEventListener('click', voltarDashboard);
      
      // Enter no campo de senha
      document.getElementById('password').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          fazerLogin();
        }
      });

      // Salvar filtros ao mudar
      document.getElementById('filtroDataInicial').addEventListener('change', salvarFiltros);
      document.getElementById('filtroDataFinal').addEventListener('change', salvarFiltros);
      document.getElementById('filtroTurno').addEventListener('change', salvarFiltros);
      
      // Salvar filtros de consumo ao mudar
      document.getElementById('filtroConsumoDataInicial').addEventListener('change', salvarFiltrosConsumo);
      document.getElementById('filtroConsumoDataFinal').addEventListener('change', salvarFiltrosConsumo);
      document.getElementById('filtroConsumoTurno').addEventListener('change', salvarFiltrosConsumo);
      
      // Fechar modal ao clicar fora
      document.getElementById('modalConfig').addEventListener('click', function(e) {
        if (e.target === this) {
          fecharModalConfig();
        }
      });
      
      document.getElementById('modalPPF').addEventListener('click', function(e) {
        if (e.target === this) {
          fecharModalPPF();
        }
      });
    }

    // Sistema de Login
    function fazerLogin() {
      const username = document.getElementById('username').value.trim();
      const password = document.getElementById('password').value;
      
      const usuarios = {
        'operador': '123456',
        'admin': 'admin123',
        'producao': 'prod2024'
      };
      
      if (usuarios[username] && usuarios[username] === password) {
        usuarioLogado = username;
        localStorage.setItem('usuarioLogado', username);
        mostrarUsuarioLogado();
        document.getElementById('username').value = '';
        document.getElementById('password').value = '';
        alert('Login realizado com sucesso!');
      } else {
        alert('Usuário ou senha incorretos!');
      }
    }

    function mostrarUsuarioLogado() {
      document.getElementById('loginArea').style.display = 'none';
      document.getElementById('userInfo').style.display = 'flex';
      document.getElementById('userName').textContent = `👤 ${usuarioLogado}`;
      document.getElementById('fabButton').classList.remove('hidden');
      
      // Mostrar botões de configuração se for admin e estiver na página de consumo
      if (usuarioLogado === 'admin' && document.getElementById('consumo-tab').classList.contains('active')) {
        document.getElementById('btnConfigConsumo').style.display = 'flex';
        document.getElementById('btnGerenciarPPF').style.display = 'flex';
      }
    }

    function fazerLogout() {
      usuarioLogado = null;
      localStorage.removeItem('usuarioLogado');
      document.getElementById('loginArea').style.display = 'flex';
      document.getElementById('userInfo').style.display = 'none';
      document.getElementById('fabButton').classList.add('hidden');
      document.getElementById('dataEntrySection').classList.remove('active');
      document.getElementById('dashboard').style.display = 'block';
      document.getElementById('btnConfigConsumo').style.display = 'none';
      document.getElementById('btnGerenciarPPF').style.display = 'none';
      
      // Voltar para a aba dashboard
      mostrarTab('dashboard-tab');
    }

    // Inicializar gráficos
    function inicializarGraficos() {
      // Gráfico de Produção por Hora
      const ctxProducao = document.getElementById('graficoProducao').getContext('2d');
      chartProducao = new Chart(ctxProducao, {
        type: 'line',
        data: {
          labels: [],
          datasets: [
            {
              label: 'Skids Produzidos',
              data: [],
              borderColor: '#1976d2',
              backgroundColor: 'rgba(25, 118, 210, 0.1)',
              tension: 0.1,
              fill: true
            },
            {
              label: 'Meta',
              data: [],
              borderColor: '#ff9800',
              backgroundColor: 'rgba(255, 152, 0, 0.1)',
              borderDash: [5, 5],
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'top'
            },
            tooltip: {
              callbacks: {
                afterLabel: function(context) {
                  const dataIndex = context.dataIndex;
                  const registros = window.ultimosRegistros || [];
                  const registro = registros.find(r => r.hora === context.label);
                  
                  if (registro) {
                    let paradas = 0;
                    if (registro.paradas) {
                      registro.paradas.forEach(p => paradas += p.tempo || 0);
                    }
                    return `Paradas: ${paradas} min`;
                  }
                  return '';
                }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Quantidade'
              }
            }
          }
        }
      });

      // Gráfico Curva S
      const ctxCurvaS = document.getElementById('graficoCurvaS').getContext('2d');
      chartCurvaS = new Chart(ctxCurvaS, {
        type: 'line',
        data: {
          labels: [],
          datasets: [
            {
              label: 'Produção Acumulada',
              data: [],
              borderColor: '#4caf50',
              backgroundColor: 'rgba(76, 175, 80, 0.1)',
              fill: true
            },
            {
              label: 'Meta Acumulada',
              data: [],
              borderColor: '#ff5722',
              borderDash: [5, 5],
              fill: false
            },
            {
              label: 'Projeção',
              data: [],
              borderColor: '#9e9e9e',
              borderDash: [2, 2],
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'top'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Quantidade Acumulada'
              }
            }
          }
        }
      });

      // Gráfico Pareto
      const ctxPareto = document.getElementById('graficoPareto').getContext('2d');
      chartPareto = new Chart(ctxPareto, {
        type: 'bar',
        data: {
          labels: [],
          datasets: [{
            label: 'Tempo de Parada (min)',
            data: [],
            backgroundColor: '#ff5252',
            yAxisID: 'y'
          }, {
            label: '% Acumulado',
            data: [],
            type: 'line',
            borderColor: '#1976d2',
            backgroundColor: 'transparent',
            yAxisID: 'y1'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          indexAxis: 'y',
          scales: {
            y: {
              beginAtZero: true,
              position: 'left',
              title: {
                display: true,
                text: 'Tempo (min)'
              }
            },
            y1: {
              beginAtZero: true,
              position: 'right',
              max: 100,
              title: {
                display: true,
                text: '% Acumulado'
              },
              grid: {
                drawOnChartArea: false
              }
            }
          }
        }
      });

      // Gráfico de Paradas por Área
      const ctxParadas = document.getElementById('graficoParadas').getContext('2d');
      chartParadas = new Chart(ctxParadas, {
        type: 'doughnut',
        data: {
          labels: [],
          datasets: [{
            data: [],
            backgroundColor: [
              '#FF6384',
              '#36A2EB',
              '#FFCE56',
              '#4BC0C0',
              '#9966FF',
              '#FF9F40',
              '#FF6384',
              '#C9CBCF',
              '#4BC0C0'
            ]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
      
      // Inicializar gráficos de consumo (serão criados quando necessário)
      chartModelosPintados = null;
      chartCoresPintadas = null;
    }

    // Criar cards skeleton
    function criarSkeletonCards() {
      const container = document.getElementById('summaryCards');
      container.innerHTML = '';
      
      for (let i = 0; i < 8; i++) {
        const card = document.createElement('div');
        card.className = 'summary-card';
        card.innerHTML = `
          <div class="skeleton skeleton-text" style="width: 60%;"></div>
          <div class="skeleton skeleton-text" style="width: 40%; height: 2em; margin-top: 10px;"></div>
        `;
        container.appendChild(card);
      }
    }

    // Calcular métricas
    function calcularMetricas(registros) {
      const metricas = {
        totalParadas: 0,
        totalSkids: 0,
        totalVazios: 0,
        totalBons: 0,
        totalRepintura: 0,
        totalProducao: 0,
        tempoDisponivel: 0,
        tempoProdutivo: 0,
        tempoParadas: 0,
        oee: 0,
        disponibilidade: 0,
        performance: 0,
        qualidade: 81.4,
        percentualRepintura: 0,
        mtbf: 0,
        mttr: 0,
        metaHora: 50,
        skidsRealHora: 0,
        horasRegistradas: 0,
        skidsPlanejadosAteAgora: 0,
        metaTotal: 0
      };

      // 1) horas brutas:
      const horasBrutas = registros.length;
      let tempoDisponivel = horasBrutas * 60;

      // 2) descontar REFEIÇÃO e LIMPEZA DA CABINE
      const tempoIgnorar = registros
        .flatMap(r => r.paradas || [])
        .filter(p =>
          ['REFEIÇÃO','LIMPEZA DA CABINE']
            .includes(p.tipo.trim().toUpperCase())
        )
        .reduce((sum, p) => sum + (p.tempo||0), 0);

      tempoDisponivel -= tempoIgnorar;

      // 3) horas e metas ajustadas
      const horasEfetivas = tempoDisponivel / 60;
      metricas.tempoDisponivel = tempoDisponivel;
      metricas.horasRegistradas = horasEfetivas;
      metricas.metaTotal = horasEfetivas * metricas.metaHora;
      metricas.skidsPlanejadosAteAgora = metricas.metaTotal;

      // 4) acumula totais válidos
      registros.forEach(r => {
        metricas.totalSkids += r.skids || 0;
        metricas.totalVazios += r.skids_vazios || 0;

        if (Array.isArray(r.paradas)) {
          r.paradas.forEach(p => {
            const tipo = p.tipo.trim().toUpperCase();
            if (!['REFEIÇÃO','LIMPEZA DA CABINE'].includes(tipo)) {
              metricas.totalParadas += p.tempo || 0;
            }
          });
        }

        if (Array.isArray(r.producao)) {
          r.producao.forEach(p => {
            metricas.totalProducao += p.qtd || 0;
            if (p.repintura) metricas.totalRepintura += p.qtd || 0;
          });
        }
      });

      metricas.totalBons = metricas.totalSkids - metricas.totalVazios;
      metricas.tempoParadas = metricas.totalParadas;

      // 5) só manutenção para MTTR/MTBF
      const paradasManut = registros
        .flatMap(r => r.paradas || [])
        .filter(p => areaPorMotivo[p.tipo] === 'MANUTENÇÃO');

      const numeroFalhas = paradasManut.length;
      const totalManut = paradasManut.reduce((s,p) => s + (p.tempo||0), 0);

      metricas.mttr = numeroFalhas>0 ? (totalManut/numeroFalhas) : 0;
      metricas.tempoProdutivo = tempoDisponivel - totalManut;
      metricas.mtbf = numeroFalhas>0
        ? (metricas.tempoProdutivo/numeroFalhas)
        : 0;

      // 6) calcula OEE
      metricas.disponibilidade = metricas.tempoDisponivel>0
        ? (metricas.tempoProdutivo/metricas.tempoDisponivel)*100
        : 0;

      const metaProd = (metricas.tempoProdutivo/60) * metricas.metaHora;
      metricas.performance = metaProd>0
        ? (metricas.totalSkids/metaProd)*100
        : 0;

      metricas.oee = (metricas.disponibilidade *
                      metricas.performance *
                      metricas.qualidade) / 10000;

      metricas.percentualRepintura = metricas.totalProducao>0
        ? (metricas.totalRepintura/metricas.totalProducao)*100
        : 0;

      metricas.skidsRealHora = horasBrutas>0
        ? (metricas.totalSkids/horasBrutas)
        : 0;

      return metricas;
    }

    // Criar cards de resumo
    function criarCardsResumo(metricas, registros) {
      const container = document.getElementById('summaryCards');
      container.innerHTML = '';

      const cards = [
        {
          title: '📊 OEE',
          value: `${metricas.oee.toFixed(1)}%`,
          subtitle: `D: ${metricas.disponibilidade.toFixed(0)}% | P: ${metricas.performance.toFixed(0)}% | Q: ${metricas.qualidade.toFixed(1)}%`,
          class: metricas.oee >= 80 ? 'success' : metricas.oee >= 60 ? 'warning' : 'danger'
        },
        {
          title: '⏱ Tempo Total de Parada',
          value: `${metricas.totalParadas} min`,
          subtitle: `${((metricas.totalParadas / metricas.tempoDisponivel) * 100).toFixed(1)}% do tempo`,
          class: metricas.totalParadas > 120 ? 'danger' : metricas.totalParadas > 60 ? 'warning' : ''
        },
        {
          title: '📦 Total de Skids',
          value: metricas.totalSkids,
          subtitle: `Meta: ${metricas.totalSkids > 0 ? ((metricas.totalSkids / metricas.metaTotal) * 100).toFixed(1) : 0}% de ${metricas.metaTotal.toFixed(0)}`,
          class: ''
        },
        {
          title: '🚫 Skids Vazios',
          value: metricas.totalVazios,
          subtitle: `${metricas.totalSkids > 0 ? ((metricas.totalVazios / metricas.totalSkids) * 100).toFixed(1) : 0}% do total`,
          class: 'danger'
        },
        {
          title: '🔄 % Repintura',
          value: `${metricas.percentualRepintura.toFixed(1)}%`,
          subtitle: `${metricas.totalRepintura} peças`,
          class: metricas.percentualRepintura > 10 ? 'danger' : metricas.percentualRepintura > 5 ? 'warning' : 'success'
        },
        {
          title: '🔧 MTBF',
          value: `${metricas.mtbf.toFixed(0)} min`,
          subtitle: 'Entre falhas',
          class: metricas.mtbf < 120 ? 'warning' : 'success'
        },
        {
          title: '🛠 MTTR',
          value: `${metricas.mttr.toFixed(0)} min`,
          subtitle: 'Para reparar',
          class: metricas.mttr > 30 ? 'danger' : metricas.mttr > 15 ? 'warning' : 'success'
        },
        {
          title: '📅 Acumulado Hora Hora',
          value: metricas.skidsPlanejadosAteAgora.toFixed(0),
          subtitle: 'Skids planejados até agora',
          class: ''  
        },
        {
          title: '🚗 Acumulado Produzido',
          value: metricas.totalSkids,
          subtitle: `de ${metricas.metaTotal.toFixed(0)} planejados`,
          class: metricas.totalSkids >= metricas.metaTotal
                ? 'success'
                : metricas.totalSkids >= metricas.metaTotal * 0.8
                  ? 'warning'
                  : 'danger'
        }
      ];

      cards.forEach(cardData => {
        const card = document.createElement('div');
        card.className = `summary-card ${cardData.class}`;
        card.innerHTML = `
          <h3>${cardData.title}</h3>
          <div class="value">${cardData.value}</div>
          <div class="subtitle">${cardData.subtitle}</div>
          <canvas class="sparkline" id="spark-${cardData.title.replace(/[^a-zA-Z]/g, '')}"></canvas>
        `;
        container.appendChild(card);
      });

      // Adicionar mini sparklines
      setTimeout(() => criarSparklines(registros), 100);
    }

    // Criar mini gráficos sparkline
    function criarSparklines(registros) {
      // Preparar dados das últimas 6 horas
      const ultimas6Horas = registros.slice(-6);
      
      // OEE Sparkline
      const oeeData = ultimas6Horas.map(r => {
        const paradas = r.paradas ? r.paradas.reduce((sum, p) => sum + (p.tempo || 0), 0) : 0;
        const disponibilidade = ((60 - paradas) / 60) * 100;
        const performance = (r.skids / 50) * 100;
        const qualidade = 81.4; // Fixo
        return (disponibilidade * performance * qualidade) / 10000;
      });
      criarSparklineChart('spark-OEE', oeeData);

      // Paradas Sparkline
      const paradasData = ultimas6Horas.map(r => {
        return r.paradas ? r.paradas.reduce((sum, p) => sum + (p.tempo || 0), 0) : 0;
      });
      criarSparklineChart('spark-TempoTotaldeParada', paradasData);

      // Produção Sparkline
      const producaoData = ultimas6Horas.map(r => r.skids || 0);
      criarSparklineChart('spark-TotaldeSkids', producaoData);

      // Skids/Hora Sparkline
      const skidsHoraData = ultimas6Horas.map(r => r.skids || 0);
      criarSparklineChart('spark-SkidsHora', skidsHoraData);
    }

    function criarSparklineChart(elementId, data) {
      const canvas = document.getElementById(elementId);
      if (!canvas || !data || data.length === 0) return;

      try {
        new Chart(canvas, {
          type: 'line',
          data: {
            labels: data.map((_, i) => ''),
            datasets: [{
              data: data,
              borderColor: '#1976d2',
              borderWidth: 2,
              fill: false,
              pointRadius: 0,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: { enabled: false }
            },
            scales: {
              x: { display: false },
              y: { display: false }
            }
          }
        });
      } catch (error) {
        console.warn('Erro ao criar sparkline:', elementId, error);
      }
    }

    // Atualizar Dashboard
    async function atualizarDashboard() {
      if (!supabase) {
        console.error('Supabase não está inicializado');
        return;
      }
      
      const loading = document.getElementById('loading');
      loading.classList.add('active');
      
      // Mostrar skeleton
      criarSkeletonCards();
      
      try {
        const dataInicial = document.getElementById('filtroDataInicial').value;
        const dataFinal = document.getElementById('filtroDataFinal').value;
        const turno = document.getElementById('filtroTurno').value;
        
        // Validar datas
        if (!dataInicial || !dataFinal) {
          alert('Por favor, selecione as datas inicial e final');
          return;
        }
        
        if (dataInicial > dataFinal) {
          alert('A data inicial não pode ser posterior à data final');
          return;
        }
        
        console.log('Buscando dados de:', dataInicial, 'até:', dataFinal, 'Turno:', turno);
        
        // Buscar registros no intervalo
        let { data: registros, error } = await supabase
          .from('registros')
          .select('*')
          .gte('data', dataInicial)
          .lte('data', dataFinal)
          .order('data', { ascending: true })
          .order('hora', { ascending: true });
        
        if (error) {
          console.error('Erro ao buscar dados do Supabase:', error);
          throw error;
        }
        
        console.log('Registros encontrados:', registros ? registros.length : 0);
        
        // Filtrar por turno se necessário
        if (turno && registros) {
          registros = registros.filter(r => {
            const hora = parseInt(r.hora.split('h')[0]);
            if (turno === '1T') return hora >= 6 && hora < 15;
            if (turno === '2T') return hora >= 15 && hora <= 23;
            if (turno === '3T') return hora >= 0 && hora < 6;
            return true;
          });
        }
        
        // Guardar registros globalmente para tooltips
        window.ultimosRegistros = registros || [];
        
        // Calcular métricas
        const metricas = calcularMetricas(registros || []);
        
        // Atualizar visualizações com verificações
        try {
          criarCardsResumo(metricas, registros || []);
        } catch (e) {
          console.error('Erro ao criar cards:', e);
        }
        
        try {
          atualizarGraficoProducao(registros || []);
        } catch (e) {
          console.error('Erro ao atualizar gráfico produção:', e);
        }
        
        try {
          atualizarGraficoCurvaS(registros || []);
        } catch (e) {
          console.error('Erro ao atualizar curva S:', e);
        }
        
        try {
          atualizarGraficoPareto(registros || []);
        } catch (e) {
          console.error('Erro ao atualizar Pareto:', e);
        }
        
        try {
          atualizarGraficoParadas(registros || []);
        } catch (e) {
          console.error('Erro ao atualizar gráfico paradas:', e);
        }
        
        try {
          atualizarHeatmap(registros || []);
        } catch (e) {
          console.error('Erro ao atualizar heatmap:', e);
        }
        
        try {
          atualizarTabelaParadas(registros || []);
        } catch (e) {
          console.error('Erro ao atualizar tabela paradas:', e);
        }
        
      } catch (error) {
        console.error('Erro ao buscar dados:', error);
        alert('Erro ao carregar dados. Por favor, verifique sua conexão.');
      } finally {
        loading.classList.remove('active');
      }
    }

    // Atualizar gráfico de produção
    function atualizarGraficoProducao(registros) {
      if (!chartProducao || registros.length === 0) return;

      const dataInicial = document.getElementById('filtroDataInicial').value;
      const dataFinal = document.getElementById('filtroDataFinal').value;
      const mostrarData = dataInicial !== dataFinal;

      const ordenados = [...registros].sort((a, b) => {
        // Primeiro ordena por data, depois por hora
        if (a.data !== b.data) {
          return a.data.localeCompare(b.data);
        }
        const ha = parseInt(a.hora.slice(0, 2), 10);
        const hb = parseInt(b.hora.slice(0, 2), 10);
        return ha - hb;
      });

      const labels = [];
      const dados = [];
      const meta = [];
      
      ordenados.forEach(r => {
        const labelData = mostrarData ? `${new Date(r.data + 'T00:00:00').toLocaleDateString('pt-BR', {day: '2-digit', month: '2-digit'})} ` : '';
        labels.push(labelData + r.hora);
        dados.push(r.skids || 0);
        meta.push(50);
      });

      // Aplicar cores baseadas na meta
      const backgroundColors = dados.map(valor => {
        if (valor >= 50) return 'rgba(76, 175, 80, 0.6)';  // Verde
        if (valor >= 45) return 'rgba(255, 152, 0, 0.6)';  // Laranja
        return 'rgba(244, 67, 54, 0.6)';  // Vermelho
      });

      chartProducao.data.labels = labels;
      chartProducao.data.datasets[0].data = dados;
      chartProducao.data.datasets[0].backgroundColor = backgroundColors;
      chartProducao.data.datasets[1].data = meta;
      chartProducao.update();
    }

    // Atualizar Curva S
    function atualizarGraficoCurvaS(registros) {
      if (!chartCurvaS || registros.length === 0) return;

      const ordenados = [...registros].sort((a, b) => {
        const ha = parseInt(a.hora.slice(0, 2), 10);
        const hb = parseInt(b.hora.slice(0, 2), 10);
        return ha - hb;
      });

      const labels = [];
      const producaoAcumulada = [];
      const metaAcumulada = [];
      const projecao = [];
      
      let totalAcumulado = 0;
      let metaTotal = 0;
      
      ordenados.forEach((r, index) => {
        labels.push(r.hora);
        totalAcumulado += r.skids || 0;
        metaTotal += 50;
        
        producaoAcumulada.push(totalAcumulado);
        metaAcumulada.push(metaTotal);
      });

      // Calcular projeção linear
      if (ordenados.length > 0) {
        const taxaAtual = totalAcumulado / ordenados.length;
        const horasRestantes = 24 - ordenados.length;
        
        for (let i = 0; i < horasRestantes && i < 5; i++) {
          const projecaoValor = totalAcumulado + (taxaAtual * (i + 1));
          projecao.push(projecaoValor);
        }
      }

      // Preparar dados da projeção
      const dadosProjecao = new Array(producaoAcumulada.length > 0 ? producaoAcumulada.length - 1 : 0).fill(null);
      if (producaoAcumulada.length > 0) {
        dadosProjecao.push(producaoAcumulada[producaoAcumulada.length - 1]);
        dadosProjecao.push(...projecao);
      }

      chartCurvaS.data.labels = labels;
      chartCurvaS.data.datasets[0].data = producaoAcumulada;
      chartCurvaS.data.datasets[1].data = metaAcumulada;
      chartCurvaS.data.datasets[2].data = dadosProjecao;
      chartCurvaS.update();
    }

    // Atualizar Pareto
    function atualizarGraficoPareto(registros) {
      if (!chartPareto) return;

      const paradasPorMotivo = {};
      
      registros.forEach(r => {
        if (r.paradas && Array.isArray(r.paradas)) {
          r.paradas.forEach(p => {
            const motivo = p.tipo || 'Não especificado';
            if (!paradasPorMotivo[motivo]) paradasPorMotivo[motivo] = 0;
            paradasPorMotivo[motivo] += p.tempo || 0;
          });
        }
      });

      // Ordenar e pegar top 10
      const sortedParadas = Object.entries(paradasPorMotivo)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);

      const labels = sortedParadas.map(([motivo]) => motivo);
      const valores = sortedParadas.map(([, tempo]) => tempo);
      
      // Calcular percentual acumulado
      const total = valores.reduce((sum, val) => sum + val, 0);
      const percentualAcumulado = [];
      let acumulado = 0;
      
      valores.forEach(val => {
        acumulado += val;
        percentualAcumulado.push(total > 0 ? (acumulado / total) * 100 : 0);
      });

      chartPareto.data.labels = labels;
      chartPareto.data.datasets[0].data = valores;
      chartPareto.data.datasets[1].data = percentualAcumulado;
      chartPareto.update();
    }

    // Atualizar gráfico de paradas
    function atualizarGraficoParadas(registros) {
      if (!chartParadas) return;

      const paradasPorArea = {};
      
      registros.forEach(r => {
        if (r.paradas && Array.isArray(r.paradas)) {
          r.paradas.forEach(p => {
            const area = p.criterio || areaPorMotivo[p.tipo] || 'OUTROS';
            if (!paradasPorArea[area]) paradasPorArea[area] = 0;
            paradasPorArea[area] += p.tempo || 0;
          });
        }
      });
      
      chartParadas.data.labels = Object.keys(paradasPorArea);
      chartParadas.data.datasets[0].data = Object.values(paradasPorArea);
      chartParadas.update();
    }

    // Criar Heatmap
    function atualizarHeatmap(registros) {
      const container = document.getElementById('heatmapContainer');
      container.innerHTML = '';

      // Coletar todos os motivos únicos
      const motivosSet = new Set();
      const dadosHeatmap = {};

      registros.forEach(r => {
        if (r.paradas && Array.isArray(r.paradas)) {
          r.paradas.forEach(p => {
            const motivo = p.tipo || 'Não especificado';
            motivosSet.add(motivo);
            
            const chave = `${r.hora}|${motivo}`;
            dadosHeatmap[chave] = (dadosHeatmap[chave] || 0) + (p.tempo || 0);
          });
        }
      });

      const motivos = Array.from(motivosSet).sort();
      const horas = [...new Set(registros.map(r => r.hora))].sort((a, b) => {
        const ha = parseInt(a.slice(0, 2), 10);
        const hb = parseInt(b.slice(0, 2), 10);
        return ha - hb;
      });

      // Criar grid
      const heatmap = document.createElement('div');
      heatmap.className = 'heatmap';

      // Header vazio
      heatmap.appendChild(document.createElement('div'));

      // Headers de hora
      horas.forEach(hora => {
        const cell = document.createElement('div');
        cell.className = 'heatmap-cell heatmap-header';
        cell.textContent = hora.split(' ')[0];
        heatmap.appendChild(cell);
      });

      // Linhas
      motivos.forEach(motivo => {
        // Header do motivo
        const header = document.createElement('div');
        header.className = 'heatmap-row-header';
        header.textContent = motivo;
        header.title = motivo;
        heatmap.appendChild(header);

        // Células
        horas.forEach(hora => {
          const cell = document.createElement('div');
          cell.className = 'heatmap-cell';
          
          const chave = `${hora}|${motivo}`;
          const tempo = dadosHeatmap[chave] || 0;
          
          // Cor baseada no tempo
          let cor = '#f5f5f5';
          if (tempo > 0) {
            if (tempo < 10) cor = '#ffeb3b';
            else if (tempo < 20) cor = '#ff9800';
            else if (tempo < 30) cor = '#ff5722';
            else cor = '#d32f2f';
          }
          
          cell.style.backgroundColor = cor;
          cell.textContent = tempo > 0 ? tempo : '';
          cell.title = `${motivo} - ${hora}: ${tempo} min`;
          
          heatmap.appendChild(cell);
        });
      });

      container.appendChild(heatmap);
    }

    // Atualizar tabela de paradas
    function atualizarTabelaParadas(registros) {
      const tbody = document.getElementById('tabelaParadasBody');
      const dataInicial = document.getElementById('filtroDataInicial').value;
      const dataFinal = document.getElementById('filtroDataFinal').value;
      const mostrarData = dataInicial !== dataFinal; // Mostrar data se for intervalo
      
      tbody.innerHTML = '';

      registros.forEach(r => {
        (r.paradas || []).forEach(p => {
          const area = p.criterio || areaPorMotivo[p.tipo] || 'OUTROS';

          const delBtn = usuarioLogado
            ? `<button class="btnDel" data-data="${r.data}" data-hora="${r.hora}" title="Excluir ${r.hora}">🗑</button>`
            : '';

          const tr = document.createElement('tr');
          const dataFormatada = mostrarData ? new Date(r.data + 'T00:00:00').toLocaleDateString('pt-BR') + ' - ' : '';
          
          tr.innerHTML = `
            <td>${dataFormatada}${r.hora}</td>
            <td>${p.tipo}</td>
            <td>${p.tempo} min</td>
            <td>${area}</td>
            <td style="text-align:center">${delBtn}</td>
          `;
          tbody.appendChild(tr);
        });
      });

      tbody.querySelectorAll('.btnDel').forEach(btn => {
        btn.onclick = () => excluirHorario(btn.dataset.data, btn.dataset.hora);
      });
    }

    // Excluir horário
    async function excluirHorario(dataSel, hora) {
      if (!usuarioLogado) {
        alert('Faça login para excluir registros!');
        return;
      }
      
      if (!confirm(`Excluir o registro de ${hora}?`)) return;

      const { error } = await supabase
        .from('registros')
        .delete()
        .eq('data', dataSel)
        .eq('hora', hora);

      if (error) {
        console.error(error);
        alert('Erro ao excluir!');
      } else {
        alert('Registro removido!');
        await atualizarDashboard();
      }
    }

    // Formulário - Funções
    function abrirFormulario() {
      if (!usuarioLogado) {
        alert('Por favor, faça login para adicionar registros!');
        return;
      }
      
      document.getElementById('dashboard').style.display = 'none';
      document.getElementById('dataEntrySection').classList.add('active');
    }

    function voltarDashboard() {
      document.getElementById('dataEntrySection').classList.remove('active');
      document.getElementById('dashboard').style.display = 'block';
      atualizarDashboard();
    }

    function inicializarFormularios() {
      adicionarParada();
      adicionarProducao();
    }

    function adicionarParada() {
      const container = document.getElementById('paradasContainer');
      const div = document.createElement('div');
      div.className = 'input-group';
      div.innerHTML = `
        <select class="parada">
          <option value="">-- Selecione o motivo --</option>
          ${getOpcoesParadas()}
        </select>
        <input type="number" class="tempo" placeholder="Tempo (min)">
      `;
      container.appendChild(div);
    }

    function adicionarProducao() {
      const container = document.getElementById('producaoContainer');
      const div = document.createElement('div');
      div.className = 'input-group';
      div.innerHTML = `
        <select class="modelo">
          <option value="">-- Modelo --</option>
          ${getOpcoesModelos()}
        </select>
        <select class="cor">
          <option value="">-- Cor --</option>
          ${getOpcoesCores()}
        </select>
        <input type="number" class="qtd" placeholder="Qtd">
        <label style="display:flex;align-items:center;gap:5px;">
          <input type="checkbox" class="repintura">
          Repintura
        </label>
      `;
      container.appendChild(div);
    }

    async function adicionarRegistro() {
      if (!supabase) {
        alert('Sistema não está pronto. Por favor, recarregue a página.');
        return;
      }
      
      const data = document.getElementById('filtroDataInicial').value;
      const hora = document.getElementById('hora').value;
      const skids = parseInt(document.getElementById('skids').value) || 0;
      const skidsVazios = parseInt(document.getElementById('skidsVazios').value) || 0;
      
      if (!hora || !data) {
        alert('Por favor, preencha a data e horário!');
        return;
      }
      
      try {
        // Verificar duplicata
        const { data: existe } = await supabase
          .from('registros')
          .select('id')
          .eq('data', data)
          .eq('hora', hora);
        
        if (existe && existe.length > 0) {
          alert(`O horário ${hora} já foi registrado para esta data!`);
          return;
        }
        
        // Coletar paradas
        const paradas = [];
        document.querySelectorAll('#paradasContainer .input-group').forEach(grupo => {
          const tipo = grupo.querySelector('.parada').value;
          const tempo = parseInt(grupo.querySelector('.tempo').value) || 0;
          
          if (tipo && tempo > 0) {
            paradas.push({
              tipo: tipo,
              tempo: tempo,
              criterio: areaPorMotivo[tipo] || 'OUTROS'
            });
          }
        });
        
        // Coletar produção
        const producao = [];
        document.querySelectorAll('#producaoContainer .input-group').forEach(grupo => {
          const modelo = grupo.querySelector('.modelo').value;
          const cor = grupo.querySelector('.cor').value;
          const qtd = parseInt(grupo.querySelector('.qtd').value) || 0;
          const repintura = grupo.querySelector('.repintura').checked;
          
          if (modelo && cor && qtd > 0) {
            producao.push({
              modelo: modelo,
              cor: cor,
              qtd: qtd,
              repintura: repintura
            });
          }
        });
        
        // Salvar no Supabase
        const { error } = await supabase.from('registros').insert([{
          data: data,
          hora: hora,
          skids: skids,
          skids_vazios: skidsVazios,
          paradas: paradas,
          producao: producao
        }]);
        
        if (error) throw error;
        
        alert('Registro salvo com sucesso!');
        limparFormulario();
        voltarDashboard();
        
      } catch (error) {
        alert('Erro ao salvar registro!');
        console.error(error);
      }
    }

    function limparFormulario() {
      document.getElementById('hora').value = '';
      document.getElementById('skids').value = '';
      document.getElementById('skidsVazios').value = '';
      document.getElementById('paradasContainer').innerHTML = '';
      document.getElementById('producaoContainer').innerHTML = '';
      adicionarParada();
      adicionarProducao();
    }

    // Funções auxiliares para gerar opções
    function getOpcoesParadas() {
      return `
        <optgroup label="🧪 Engenharia">
          <option value="TESTE DE ENGENHARIA">TESTE DE ENGENHARIA</option>
          <option value="LIMITE DE EIXO">LIMITE DE EIXO</option>
        </optgroup>
        <optgroup label="👥 Gestão">
          <option value="FALTA DE FERRAMENTAS">FALTA DE FERRAMENTAS</option>
          <option value="FALTA DE OPERADOR NA CARGA">FALTA DE OPERADOR NA CARGA</option>
          <option value="FALTA DE PEÇAS DA PREPARAÇÃO">FALTA DE PEÇAS DA PREPARAÇÃO</option>
          <option value="OPERADOR BUSCANDO PEÇA NO ALMOXARIFADO">OPERADOR BUSCANDO PEÇA NO ALMOXARIFADO</option>
          <option value="OPERADOR NA ENFERMARIA">OPERADOR NA ENFERMARIA</option>
          <option value="ORGANIZAÇÃO GERAL NO SETOR">ORGANIZAÇÃO GERAL NO SETOR</option>
          <option value="PARADA NA CABINE">PARADA NA CABINE</option>
          <option value="PARADA NA CARGA - ABASTECENDO A LINHA">PARADA NA CARGA - ABASTECENDO A LINHA</option>
          <option value="PARADA NA DESCARGA - DESCARREGANDO PEÇAS">PARADA NA DESCARGA - DESCARREGANDO PEÇAS</option>
          <option value="PARADA EXTERNA">PARADA EXTERNA</option>
          <option value="REFEIÇÃO">REFEIÇÃO</option>
          <option value="REGULAGEM DE MÁQUINA">REGULAGEM DE MÁQUINA</option>
          <option value="RETRABALHO / LIMPEZA DE PEÇAS">RETRABALHO / LIMPEZA DE PEÇAS</option>
          <option value="REUNIÃO COM A DIRETORIA">REUNIÃO COM A DIRETORIA</option>
          <option value="REUNIÃO">REUNIÃO</option>
          <option value="TREINAMENTO">TREINAMENTO</option>
          <option value="TROCA DE TURNO">TROCA DE TURNO</option>
        </optgroup>
        <optgroup label="📦 Logística">
          <option value="AGUARDANDO A PROGRAMAÇÃO">AGUARDANDO A PROGRAMAÇÃO</option>
          <option value="FALHA RFID">FALHA RFID</option>
          <option value="FALTA DE ABASTECIMENTO DE RACK">FALTA DE ABASTECIMENTO DE RACK</option>
          <option value="FALTA DE EMBALAGEM DA LOGÍSTICA">FALTA DE EMBALAGEM DA LOGÍSTICA</option>
          <option value="FALTA DE EMPILHADOR DA LOGÍSTICA ABASTECENDO PEÇAS">FALTA DE EMPILHADOR DA LOGÍSTICA ABASTECENDO PEÇAS</option>
          <option value="FALTA DE MATÉRIA PRIMA (TINTA / VERNIZ)">FALTA DE MATÉRIA PRIMA (TINTA / VERNIZ)</option>
          <option value="FALTA DE PEÇAS DO ALMOXARIFADO (REQUISITADO)">FALTA DE PEÇAS DO ALMOXARIFADO (REQUISITADO)</option>
          <option value="FALTA DE PEÇAS INJETADAS">FALTA DE PEÇAS INJETADAS</option>
          <option value="PARADA PROGRAMADA">PARADA PROGRAMADA</option>
        </optgroup>
        <optgroup label="🔧 Manutenção">
          <option value="AGUARDANDO A MANUTENÇÃO">AGUARDANDO A MANUTENÇÃO</option>
          <option value="CABINE DESBALANCEADA">CABINE DESBALANCEADA</option>
          <option value="CORRENTE QUEBRADA">CORRENTE QUEBRADA</option>
          <option value="FALHA NO ELEVADOR">FALHA NO ELEVADOR</option>
          <option value="FALTA AR COMPRIMIDO">FALTA AR COMPRIMIDO</option>
          <option value="FALTA DE ENERGIA">FALTA DE ENERGIA</option>
          <option value="MANGUEIRA ENTUPIDA">MANGUEIRA ENTUPIDA</option>
          <option value="MANGUEIRA VAZANDO">MANGUEIRA VAZANDO</option>
          <option value="MANUTENÇÃO CORRETIVA">MANUTENÇÃO CORRETIVA</option>
          <option value="SKID TRAVADO">SKID TRAVADO</option>
          <option value="MANUTENÇÃO ELÉTRICA">MANUTENÇÃO ELÉTRICA</option>
          <option value="MANUTENÇÃO MECÂNICA">MANUTENÇÃO MECÂNICA</option>
          <option value="MANUTENÇÃO PREDIAL">MANUTENÇÃO PREDIAL</option>
          <option value="MANUTENÇÃO PREVENTIVA">MANUTENÇÃO PREVENTIVA</option>
          <option value="MANUTENÇÃO SERRALHERIA">MANUTENÇÃO SERRALHERIA</option>
          <option value="PROBLEMA NO ROBÔ CAB. FLAMAGEM">PROBLEMA NO ROBÔ CAB. FLAMAGEM</option>
          <option value="PROBLEMA NO ROBÔ CAB. PRIMER">PROBLEMA NO ROBÔ CAB. PRIMER</option>
          <option value="PROBLEMA NO ROBÔ CAB. BASE">PROBLEMA NO ROBÔ CAB. BASE</option>
          <option value="PROBLEMA NO ROBÔ CAB. VERNIZ">PROBLEMA NO ROBÔ CAB. VERNIZ</option>
          <option value="PROBLEMA NO MAÇARICO">PROBLEMA NO MAÇARICO</option>
          <option value="PROBLEMA NO MOTOR / CORREIA">PROBLEMA NO MOTOR / CORREIA</option>
          <option value="PROBLEMA NO POWER WASH">PROBLEMA NO POWER WASH</option>
        </optgroup>
        <optgroup label="🧽 Milclean">
          <option value="AGUARDANDO OPERADOR PARA LIMPEZA">AGUARDANDO OPERADOR PARA LIMPEZA</option>
        </optgroup>
        <optgroup label="🏭 Produção">
          <option value="FALTA DE OPERADOR">FALTA DE OPERADOR</option>
          <option value="FIM DE EXPEDIENTE">FIM DE EXPEDIENTE</option>
          <option value="LIMPEZA DE MÁQUINA">LIMPEZA DE MÁQUINA</option>
          <option value="PAUSA">PAUSA</option>
          <option value="TROCA DE PEÇAS">TROCA DE PEÇAS</option>
          <option value="TROCA DE SETUP">TROCA DE SETUP</option>
        </optgroup>
        <optgroup label="✅ Qualidade">
          <option value="ESPERANDO LIBERAÇÃO DA QUALIDADE">ESPERANDO LIBERAÇÃO DA QUALIDADE</option>
        </optgroup>
        <optgroup label="⚙️ Setup">
          <option value="SETUP DE COR">SETUP DE COR</option>
          <option value="TROCA DE MODELO">TROCA DE MODELO</option>
        </optgroup>
        <optgroup label="🎨 Pintura">
          <option value="LIMPEZA DA CABINE">LIMPEZA DA CABINE</option>
          <option value="GAP PARA LIMPEZA NA CABINE">GAP PARA LIMPEZA NA CABINE</option>
          <option value="LIMPEZA CONJUNTO ECOBELL">LIMPEZA CONJUNTO ECOBELL</option>
          <option value="GAP NA FLAMAGEM">GAP NA FLAMAGEM</option>
        </optgroup>
        <optgroup label="🛡️ Segurança">
          <option value="ACIDENTE / INCIDENTE">ACIDENTE / INCIDENTE</option>
          <option value="INSPEÇÃO DE SEGURANÇA">INSPEÇÃO DE SEGURANÇA</option>
        </optgroup>
      `;
    }

    function getOpcoesModelos() {
      return MODELOS.map(modelo => `<option value="${modelo}">${modelo}</option>`).join('');
    }

    function getOpcoesCores() {
      return CORES.map(cor => `<option value="${cor}">${cor}</option>`).join('');
    }

    // Aguardar carregamento completo e inicializar
    window.addEventListener('DOMContentLoaded', function() {
      console.log('DOM carregado, verificando bibliotecas...');
      
      let tentativas = 0;
      const maxTentativas = 50; // 5 segundos
      
      const checkLibraries = setInterval(() => {
        tentativas++;
        
        // Verificar se as bibliotecas estão disponíveis
        const chartDisponivel = typeof Chart !== 'undefined';
        const supabaseDisponivel = typeof window.supabase !== 'undefined' && window.supabase.createClient;
        
        console.log(`Tentativa ${tentativas}: Chart.js = ${chartDisponivel}, Supabase = ${supabaseDisponivel}`);
        
        if (chartDisponivel && supabaseDisponivel) {
          clearInterval(checkLibraries);
          console.log('Bibliotecas carregadas, iniciando aplicação...');
          inicializarApp();
        } else if (tentativas >= maxTentativas) {
          clearInterval(checkLibraries);
          console.error('Timeout ao carregar bibliotecas');
          
          let mensagemErro = 'Erro ao carregar bibliotecas:\n';
          if (!chartDisponivel) mensagemErro += '- Chart.js não foi carregado\n';
          if (!supabaseDisponivel) mensagemErro += '- Supabase não foi carregado\n';
          
          alert(mensagemErro + '\nPor favor, recarregue a página.');
        }
      }, 100);
    });
  </script>
</body>
</html>
